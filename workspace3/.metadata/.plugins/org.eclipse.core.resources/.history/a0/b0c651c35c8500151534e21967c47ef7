module clones

import List;
import IO;
import lang::java::m3::Core;
import lang::java::jdt::m3::Core;
import util::Math; 
import String;

import volume;

public int dupeLength(list[str] l, int i1, int i2)
{
	println("DupeLength: \n\t<l[i1..] + l[..i1]>\n\t<l[i2..] + l[..i2]>");
	return size(dupe(l[i1..] + l[..i1], l[i2..] + l[..i2]));
}

public list[str] dupe(list[str] l, list[str] r)
{
	maxCloneLength = min(size(l), size(r));
	
	int end = 0;
	while(maxCloneLength > i && l[i] == r[i])
	{
		end = end+1;
	}
	return l[..i];
}

public list[str] dupe2(list[str] l, int i1, int i2, int minDupeLength)
{
	int startInx1 = i1 - minDupeLength;
	int startInx2 = i2 - minDupeLength;
	
	sizeOfList = size(l);
	
	int dupeLength = 0;
	
	while(i1 < sizeOfList && i2 < sizeOfList)
	{
		if(l[startInx1] == l[startInx2]) dupeLength = dupeLength + 1;
		else if( startInx1 > i1) break;
		
		startInx1 = startInx1 + 1;
		startInx2 = startInx2 + 1;
	} 
	
	return l[startInx1-dupeLength2 .. startInx1-1];
	
}

public list[str] generateStringList(int size)
{
	return [ "This is a string with a length of 80 characters                                 
			 ' lorem ipsum lorem ipsum lorem ipsum lorem ipsum 
			 'lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum 
			 'lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum 
			 'lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum 
			 'lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum 
			 'lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum 
			 'lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum 
			 'lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum"  | x <- [0..size]];
}

public void testSomething()
{
	// TODO: we can count back instead of fwd becasue bla[-1] is allowed. That safes us the % sizeofList

	//  [*readFileLines(files) | files <- createM3FromEclipseProject(|project://smallsql0.21_src|)@containment.from, files.scheme == "java+compilationUnit" ]
	// myList = [ trim(x) | x <- GetProjectLines(createM3FromEclipseProject(|project://smallsql0.21_src|))];
	myList = [ trim(x) | x <- GetProjectLines(createM3FromEclipseProject(|project://MyTestJava|))];
	
	// let's see how long it takes to do 200000 string compares
	minumumCloneLength = 6;
	indicesToCheck = [ x | x <- [0..size(myList)], x % minumumCloneLength == 0];
	
	println(myList);
	println(indicesToCheck);
	
	sizeOfList = size(myList);
	
	//list[tuple[int,int,str]] possibleCloneLines = [];
	list[int] cloneLengths = [];
	
	
	for(I <- [1..size(myList)]) // we skip 0 since doing a mirror check does not make sense
	{
		//possibleCloneLines = possibleCloneLines +  [ <I,x+i,myList[I]>  | x <- indicesToCheck, myList[I] == myList[(x+I) % sizeOfList]];
		cloneLengths = cloneLengths + [ dupeLength(myList, x, x+I)  | x <- indicesToCheck, myList[x] == myList[(x+I) % sizeOfList]];
		//println(boolList);
	}
	
	//println(possibleCloneLines);
	println(cloneLengths);
	
	//println( [ myList[x] == myList[(x+1) % size(myList)] | x <- [0..size(myList)]] );
}