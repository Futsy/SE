module BubbleSort
import List;
import IO;

public list[int] sort1(list[int] numbers){
  if(size(numbers) > 0){
     for(int i <- [0 .. size(numbers)-1]){
       if(numbers[i] > numbers[i+1]){
         <numbers[i], numbers[i+1]> = <numbers[i+1], numbers[i]>;		// Funny, assigning multiple elements in array
         return sort1(numbers);
       }
    }
  }  
  return numbers;
}

// any <- very haskellish
bool isSorted(list[int] lst) = !any(int i <- index(lst), int j <- index(lst), (i < j) && (lst[i] > lst[j]));

// Execute this by issuing ':test' NO SEMICOLON!
test bool sorted1a() = isSorted([]);
test bool sorted1b() = isSorted([10]);
test bool sorted1c() = isSorted([10, 20]);
test bool sorted1d() = isSorted([-10, 20, 30]);
test bool sorted1e() = !isSorted([10, 20, -30]);

// We pattern match on [Int], Int, Int, [Int] and check if the two should be swapped.
// Checked what happens in the function testPatternMatch:
// We will just get ([] 0, 1, [2..]) followed by ([0], 1, 2, [3..]) etc until we can no longer
// match the pattern
// the fail statement just triggers the next pattern match
public list[int] sort2(list[int] numbers){
  switch(numbers){
    case [*int nums1, int p, int q, *int nums2]:
       if(p > q){
          return sort2(nums1 + [q, p] + nums2);
       } else {
       	  fail;	
       }
     default: return numbers;
   }
}

public void testPatternMatch(list[int] numbers)
{
	switch(numbers){
    case [*int nums1, int p, int q, *int nums2]:   
	{
     	println("This fails");
     	 println("<nums1>, [<p>], [<q>], <nums2>");  
     	fail;
     }   
     default:
     	println("default");
   }
}

test bool sorted2(list[int] lst) = isSorted(sort2(lst));

// sort3: uses list matching and while

public list[int] sort3(list[int] numbers){
  while([*int nums1, int p, *int nums2, int q, *int nums3] := numbers && p > q)
        numbers = nums1 + [q] + nums2 + [p] + nums3;
  return numbers;
}

test bool sorted3(list[int] lst) = isSorted(sort3(lst));

public void testPatternMatch2(list[int] numbers){
  switch(numbers){
    case [*int nums1, int p, *int nums2, int q, *int nums3]:
	{
     	println("This fails");
     	 println("<nums1>, <p>, <nums2>, <q>, <nums3>");  
     	fail;
     }   
     default:
     	println("default");
   }
}