module Serialize

// Model
import lang::java::jdt::m3::AST;
import lang::java::jdt::m3::Core;

// General imports
import IO;
import List;

// Custom data type to keep the nodes split
data AstNode
	= \declarationNode(str name, int size, loc src)
	| \statementNode(str name, int size, loc src)
	| \expressionNode(str name, int size, loc src)
	| \typeNode(str name, int size); 

/**
 * This function turns an AST into a serialzed AST
 * @param the AST you want to serialize
 * @return the serialized AST
 */
public void Serialize(set[Declaration] ast)
{
	//lrel[value, int] serialized = [];
	
	// We serialize the AST by a preorder traversal
	list[AstNode] nodes = [];
	top-down visit(ast) {
	case \Declaration d: nodes += declarationNode("<getName(d)>", 1/*size(d)*/, d@src);
	case \Statement s: nodes += statementNode("<getName(s)>", 1/*size(s)*/, s@src); 
	case \Expression e: nodes += expressionNode("<getName(e)>", 1/*size(e)*/, e@src);
	case \Type t: nodes += typeNode("<getName(t)>", 1/*size(t)*/);
	}
	return nodes;
}

/**
 * Obtains the name of the object
 * @param Dec
 * @return string representation of the name
 */
 private str placeH(Declaration d) {
 	
 }