[
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MemoryStream",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Mutable",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionDayOfMonth",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRand",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSDatabaseMetaData",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Join",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionMod",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnP1Number",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionSoundex",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.TableViewMap",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionPI",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionInsert",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTan",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SQLTokenizer",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StorePage",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionMonth",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.TableViewResult",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSDriver",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionASin",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.language.Language",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DataSources",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionChar",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DataSource",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionCeiling",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionExp",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandCreateView",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionMinute",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionName",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptions",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandTable",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.TableResult",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ViewResult",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLocate",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.TransactionStep",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.TableStorePage",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StorePageLink",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionSin",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreNull",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SmallSQLException",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionCase",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreNoCurrentRow",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTimestampAdd",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.TableStorePageInsert",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRadians",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandCreateDatabase",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongList",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionATan2",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.language.Language_en",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionInSelect",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionAscii",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Store",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeListEnum",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionDayOfYear",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CreateFile",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Expression",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Money",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.tools.CommandLine",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSet",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongLongList",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLength",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionACos",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Column",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionHour",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Lobs",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.GroupResult",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnFloat",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Expressions",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScrollIndex",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestIdentifer",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestDeleteUpdate",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.UnionAll",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandDrop",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Logger",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunction",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionCot",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTokenizer",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionSqrt",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.FileIndexNode",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionATan",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionCos",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionDegrees",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionDayOfWeek",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionSpace",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandDelete",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.FileIndex",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionIIF",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ColumnExpression",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.RowSource",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionYear",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.AllTests",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionDifference",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionPower",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionSign",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLog",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSetMetaData",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StorePageMap",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestDBMetaData",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandUpdate",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexNode",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ForeignKey",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSSavepoint",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexNodeScrollStatus",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLog10",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SQLToken",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRepeat",
"duplicate": [],
"imports":[],
"selfLink": false
},
{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ForeignKeys",
"duplicate": [
{
"fileACode":"}<br>final int size(){<br>return size;<br>}<br>final ForeignKey get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final int size(){<br>return size;<br>}<br>final IndexDescription get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexDescriptions"
}
,{
"fileACode":"}<br>final int size(){<br>return size;<br>}<br>final ForeignKey get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final int size(){<br>return size;<br>}<br>final Column get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Columns"
}
,{
"fileACode":"}<br>final int size(){<br>return size;<br>}<br>final ForeignKey get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final int size(){<br>return size;<br>}<br>final String get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Strings"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexDescriptions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Columns"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Strings"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet",
"duplicate": [
{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Timestamp getTimestamp(int columnIndex) throws SQLException {<br>try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Date getDate(int columnIndex) throws SQLException {<br>try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"}<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new Time(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new Date(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"}<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new Date(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new Time(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new URL( expr.getString() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"try{<br>MutableNumeric obj = getValue(columnIndex).getNumeric();<br>wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>MutableNumeric obj = getValue(columnIndex).getNumeric();<br>wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal(scale);<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new URL( expr.getString() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = expr.isNull();<br>return expr.getBoolean();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>return expr.getBoolean();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = expr.isNull();<br>return expr.getFloat();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>return expr.getFloat();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new URL( expr.getString() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal(scale);<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal(scale);<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Date getDate(int columnIndex) throws SQLException {<br>try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Timestamp getTimestamp(int columnIndex) throws SQLException {<br>try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = expr.isNull();<br>return expr.getInt();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>return expr.getInt();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new URL( expr.getString() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Time getTime(int columnIndex) throws SQLException {<br>try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Timestamp getTimestamp(int columnIndex) throws SQLException {<br>try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Date getDate(int columnIndex) throws SQLException {<br>try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Time getTime(int columnIndex) throws SQLException {<br>try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"}<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new Timestamp(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new Time(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"}<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new Timestamp(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new Date(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"}<br>public SQLWarning getWarnings(){<br>return null;<br>}<br>public void clearWarnings(){<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public SQLWarning getWarnings(){<br>return null;<br>}<br>public void clearWarnings(){<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSConnection"
}
,{
"fileACode":"try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new URL( expr.getString() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new URL( expr.getString() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"}<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new Time(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new Timestamp(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Date getDate(int columnIndex) throws SQLException {<br>try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Time getTime(int columnIndex) throws SQLException {<br>try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Time getTime(int columnIndex) throws SQLException {<br>try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Timestamp getTimestamp(int columnIndex) throws SQLException {<br>try{<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"try{<br>MutableNumeric obj = getValue(columnIndex).getNumeric();<br>wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal(scale);<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>MutableNumeric obj = getValue(columnIndex).getNumeric();<br>wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"}<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new Date(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>Expression expr = getValue(columnIndex);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return new Timestamp(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSConnection"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Columns",
"duplicate": [
{
"fileACode":"}<br>final int size(){<br>return size;<br>}<br>final Column get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final int size(){<br>return size;<br>}<br>final String get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Strings"
}
,{
"fileACode":"}<br>final int size(){<br>return size;<br>}<br>final Column get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final int size(){<br>return size;<br>}<br>final ForeignKey get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ForeignKeys"
}
,{
"fileACode":"}<br>final int size(){<br>return size;<br>}<br>final Column get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final int size(){<br>return size;<br>}<br>final IndexDescription get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexDescriptions"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Strings"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ForeignKeys"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexDescriptions"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestAlterTable2",
"duplicate": [
{
"fileACode":"}<br>public void tearDown(){<br>try {<br>dropTable( AllTests.getConnection(), table );<br>} catch (SQLException ex) {<br>ex.printStackTrace();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public void tearDown(){<br>try {<br>dropTable( AllTests.getConnection(), table );<br>} catch (SQLException ex) {<br>ex.printStackTrace();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestAlterTable"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestAlterTable"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren",
"duplicate": [
{
"fileACode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>public void setUp(){<br>tearDown();<br>",
"cloneType":1,
"cloneCode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>public void setUp(){<br>tearDown();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestDataTypes"
}
,{
"fileACode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"this.testValue = testValue;<br>}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>public void setUp(){<br>tearDown();<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>",
"cloneType":1,
"cloneCode":"this.testValue = testValue;<br>}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>public void setUp(){<br>tearDown();<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestFunctions"
}
,{
"fileACode":"a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneType":1,
"cloneCode":"a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
}
,{
"fileACode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneType":1,
"cloneCode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(60000)\"  , new byte[54321],        new byte[]{12, 45, 2, 56, 89}),<br>a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneType":1,
"cloneCode":"a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
}
,{
"fileACode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>",
"cloneType":1,
"cloneCode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"private static final TestValue[] TESTS = new TestValue[]{<br>a(\"tinyint\"           , new Byte( (byte)3),     new Byte( (byte)4)),<br>a(\"byte\"              , new Byte( (byte)3),     new Byte( (byte)4)),<br>a(\"smallint\"          , new Short( (short)3),   new Short( (short)4)),<br>a(\"int\"               , new Integer(3),         new Integer(4)),<br>a(\"bigint\"            , new Long(3),            new Long(4)),<br>a(\"real\"              , new Float(3.45),        new Float(4.56)),<br>a(\"float\"             , new Float(3.45),        new Float(4.56)),<br>a(\"double\"            , new Double(3.45),       new Double(4.56)),<br>a(\"smallmoney\"        , new Float(3.45),        new Float(4.56)),<br>a(\"money\"             , new Float(3.45),        new Float(4.56)),<br>a(\"money\"             , new Double(3.45),       new Double(4.56)),<br>a(\"numeric(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),<br>a(\"decimal(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),<br>",
"cloneType":1,
"cloneCode":"private static final TestValue[] TESTS = new TestValue[]{<br>a(\"tinyint\"           , new Byte( (byte)3),     new Byte( (byte)4)),<br>a(\"byte\"              , new Byte( (byte)3),     new Byte( (byte)4)),<br>a(\"smallint\"          , new Short( (short)3),   new Short( (short)4)),<br>a(\"int\"               , new Integer(3),         new Integer(4)),<br>a(\"bigint\"            , new Long(3),            new Long(4)),<br>a(\"real\"              , new Float(3.45),        new Float(4.56)),<br>a(\"float\"             , new Float(3.45),        new Float(4.56)),<br>a(\"double\"            , new Double(3.45),       new Double(4.56)),<br>a(\"smallmoney\"        , new Float(3.45),        new Float(4.56)),<br>a(\"money\"             , new Float(3.45),        new Float(4.56)),<br>a(\"money\"             , new Double(3.45),       new Double(4.56)),<br>a(\"numeric(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),<br>a(\"decimal(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
}
,{
"fileACode":"a(\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(60000)\"  , new byte[54321],        new byte[]{12, 45, 2, 56, 89}),<br>a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneType":1,
"cloneCode":"a(\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
}
,{
"fileACode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneType":1,
"cloneCode":"rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneType":1,
"cloneCode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestMoneyRounding"
}
,{
"fileACode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneType":1,
"cloneCode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneType":1,
"cloneCode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"}<br>private static TestValue a(String dataType, Object small, Object large){<br>TestValue value = new TestValue();<br>value.dataType  = dataType;<br>value.small     = small;<br>value.large     = large;<br>return value;<br>}<br>private static class TestValue{<br>String dataType;<br>Object small;<br>Object large;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>private static TestValue a(String dataType, Object small, Object large){<br>TestValue value = new TestValue();<br>value.dataType  = dataType;<br>value.small     = small;<br>value.large     = large;<br>return value;<br>}<br>private static class TestValue{<br>String dataType;<br>Object small;<br>Object large;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
}
,{
"fileACode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneType":1,
"cloneCode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneType":1,
"cloneCode":"rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"}<br>public void runTest() throws Exception{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");<br>assertFalse( \"To many rows\", rs.next() );<br>",
"cloneType":1,
"cloneCode":"}<br>public void runTest() throws Exception{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");<br>assertFalse( \"To many rows\", rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
}
,{
"fileACode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>pr.execute();<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.small);<br>pr.execute();<br>pr.setObject( 1, testValue.large);<br>pr.setObject( 2, testValue.large);<br>pr.execute();<br>pr.setObject( 1, testValue.large);<br>pr.setObject( 2, testValue.small);<br>pr.execute();<br>pr.setObject( 1, null);<br>pr.setObject( 2, testValue.small);<br>pr.execute();<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, null);<br>pr.execute();<br>pr.setObject( 1, null);<br>pr.setObject( 2, null);<br>pr.execute();<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>pr.execute();<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.small);<br>pr.execute();<br>pr.setObject( 1, testValue.large);<br>pr.setObject( 2, testValue.large);<br>pr.execute();<br>pr.setObject( 1, testValue.large);<br>pr.setObject( 2, testValue.small);<br>pr.execute();<br>pr.setObject( 1, null);<br>pr.setObject( 2, testValue.small);<br>pr.execute();<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, null);<br>pr.execute();<br>pr.setObject( 1, null);<br>pr.setObject( 2, null);<br>pr.execute();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
}
,{
"fileACode":"a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(60000)\"  , new byte[54321],        new byte[]{12, 45, 2, 56, 89}),<br>a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneType":1,
"cloneCode":"a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
}
,{
"fileACode":"pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneType":1,
"cloneCode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next());<br>assertTrue( \"To few rows\", rs.next());<br>",
"cloneType":1,
"cloneCode":"assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>assertFalse( \"To many rows\", rs.next() );<br>pr.close();<br>pr = con.prepareStatement(\"Select * from \" + table + \" where a in(?,?)\");<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>rs = pr.executeQuery();<br>assertTrue( \"To few rows\", rs.next() );<br>assertTrue( \"To few rows\", rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"a(\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>",
"cloneType":1,
"cloneCode":"a(\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestDataTypes"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestFunctions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestMoneyRounding"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.TableView",
"duplicate": [
{
"fileACode":"}catch(Throwable e){<br>if(raFile != null)<br>try{<br>raFile.close();<br>}catch(Exception e2){<br>DriverManager.println(e2.toString());<br>}<br>throw SmallSQLException.createFromException(e);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>if(raFile != null)<br>try{<br>raFile.close();<br>}catch(Exception e2){<br>DriverManager.println(e2.toString());<br>}<br>throw SmallSQLException.createFromException(e);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexDescription"
}
,{
"fileACode":"raFile = Utils.openRaFile( file, database.isReadOnly() );<br>ByteBuffer buffer = ByteBuffer.allocate(8);<br>raFile.read(buffer);<br>buffer.position(0);<br>int magic   = buffer.getInt();<br>int version = buffer.getInt();<br>",
"cloneType":1,
"cloneCode":"raFile = Utils.openRaFile( file, database.isReadOnly() );<br>ByteBuffer buffer = ByteBuffer.allocate(8);<br>raFile.read(buffer);<br>buffer.position(0);<br>int magic   = buffer.getInt();<br>int version = buffer.getInt();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexDescription"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexDescription"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexDescription"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSPreparedStatement",
"duplicate": [
{
"fileACode":"if(failed == null){<br>failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);<br>failed.initCause(ex);<br>}<br>failed.setNextException(ex);<br>}<br>}<br>batches.clear();<br>if(failed != null)<br>throw failed;<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"if(failed == null){<br>failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);<br>failed.initCause(ex);<br>}<br>failed.setNextException(ex);<br>}<br>}<br>batches.clear();<br>if(failed != null)<br>throw failed;<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSStatement"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSStatement"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index",
"duplicate": [
{
"fileACode":"node.addNode( digit, rowOffset );<br>return null;<br>}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>if(isLast){<br>node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i );<br>",
"cloneType":1,
"cloneCode":"node.addNode( digit, rowOffset );<br>return null;<br>}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>if(isLastValue){<br>node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"node.addNode( digit, rowOffset );<br>return null;<br>}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>if(isLastValue){<br>node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i);<br>",
"cloneType":1,
"cloneCode":"node.addNode( digit, rowOffset );<br>return null;<br>}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>if(isLast){<br>node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"}<br>return node.addRootValue( key, i);<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>if(isLastValue){<br>node.saveValue( rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>return node.addRootValue( key, i );<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>if(isLast){<br>node.saveValue(rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"}<br>return node.addRootValue( key, i );<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>if(isLast){<br>node.saveValue(rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>return node.addRootValue( key, i);<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>if(isLastValue){<br>node.saveValue( rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>page = add( page, rowOffset, longToBinarySortOrder( expr.getLong()), isLastValues, 4 );<br>break;<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>page = find( page, longToBinarySortOrder( expr.getLong()), 4, nodeList );<br>break;<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"node.addNode( digit, rowOffset );<br>return null;<br>}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>",
"cloneType":1,
"cloneCode":"node.addNode( digit, rowOffset );<br>return null;<br>}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"node.addNode( digit, rowOffset );<br>return null;<br>}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>if(isLastValue){<br>node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i);<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>if(isLastValue){<br>node.saveValue( rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>",
"cloneType":1,
"cloneCode":"node.addNode( digit, rowOffset );<br>return null;<br>}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>if(isLast){<br>node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i );<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>if(isLast){<br>node.saveValue(rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"if(page == null)<br>return null;<br>if(i + 1 == count)<br>return page.getValue();<br>else<br>page = (IndexNode)page.getValue();<br>}<br>throw new Error();<br>}<br>",
"cloneType":1,
"cloneCode":"if(page == null)<br>return null;<br>if(i + 1 == count)<br>return page.getValue();<br>else<br>page = (IndexNode)page.getValue();<br>}<br>throw new Error();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"break;<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>page = add( page, rowOffset, longToBinarySortOrder( expr.getLong()), isLastValues, 4 );<br>break;<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"break;<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>page = find( page, longToBinarySortOrder( expr.getLong()), 4, nodeList );<br>break;<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>page = find( page, longToBinarySortOrder( expr.getLong()), 4, nodeList );<br>break;<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>case SQLTokenizer.LONGNVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>page = add( page, rowOffset, longToBinarySortOrder( expr.getLong()), isLastValues, 4 );<br>break;<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>case SQLTokenizer.LONGNVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"node.saveValue( rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"node.saveValue(rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"}<br>return node.addRootValue( key, i);<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>if(isLastValue){<br>node.saveValue( rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>",
"cloneType":1,
"cloneCode":"}<br>return node.addRootValue( key, i );<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>if(isLast){<br>node.saveValue(rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>if(isLast){<br>node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i );<br>",
"cloneType":1,
"cloneCode":"}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>if(isLastValue){<br>node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"if(page == null)<br>return null;<br>if(i + 1 == count)<br>return page.getValue();<br>else<br>page = (IndexNode)page.getValue();<br>}<br>throw new Error();<br>}<br>",
"cloneType":1,
"cloneCode":"if(page == null)<br>return null;<br>if(i + 1 == count)<br>return page.getValue();<br>else<br>page = (IndexNode)page.getValue();<br>}<br>throw new Error();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>if(isLastValue){<br>node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i);<br>",
"cloneType":1,
"cloneCode":"}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>if(isLast){<br>node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"break;<br>case SQLTokenizer.VARBINARY:<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.LONGVARBINARY:<br>case SQLTokenizer.BLOB:<br>case SQLTokenizer.UNIQUEIDENTIFIER:<br>",
"cloneType":1,
"cloneCode":"break;<br>case SQLTokenizer.VARBINARY:<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.LONGVARBINARY:<br>case SQLTokenizer.BLOB:<br>case SQLTokenizer.UNIQUEIDENTIFIER:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"node.addNode( digit, rowOffset );<br>return null;<br>}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>",
"cloneType":1,
"cloneCode":"node.addNode( digit, rowOffset );<br>return null;<br>}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"}<br>return node.addRootValue( key, i );<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>if(isLast){<br>node.saveValue(rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>",
"cloneType":1,
"cloneCode":"}<br>return node.addRootValue( key, i);<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>if(isLastValue){<br>node.saveValue( rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"break;<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"break;<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"break;<br>case SQLTokenizer.VARBINARY:<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.LONGVARBINARY:<br>case SQLTokenizer.BLOB:<br>case SQLTokenizer.UNIQUEIDENTIFIER:<br>",
"cloneType":1,
"cloneCode":"break;<br>case SQLTokenizer.VARBINARY:<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.LONGVARBINARY:<br>case SQLTokenizer.BLOB:<br>case SQLTokenizer.UNIQUEIDENTIFIER:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"node.saveValue(rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"node.saveValue( rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i );<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>",
"cloneType":1,
"cloneCode":"node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i);<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"break;<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"break;<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i);<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>",
"cloneType":1,
"cloneCode":"node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i );<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"node.addNode( digit, rowOffset );<br>return null;<br>}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>if(isLast){<br>node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i );<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>if(isLast){<br>node.saveValue(rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>",
"cloneType":1,
"cloneCode":"node.addNode( digit, rowOffset );<br>return null;<br>}<br>return node.addRoot(digit);<br>}<br>node = node.addNode(digit);<br>if(node.isEmpty()){<br>if(isLastValue){<br>node.addRemainderKey( rowOffset, key, i );<br>return null;<br>}<br>return node.addRootValue( key, i);<br>}else<br>if(equals(node.getRemainderValue(), key, i)){<br>if(isLastValue){<br>node.saveValue( rowOffset);<br>return null;<br>}<br>return node.addRoot();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"break;<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>page = find( page, longToBinarySortOrder( expr.getLong()), 4, nodeList );<br>break;<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"break;<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>page = add( page, rowOffset, longToBinarySortOrder( expr.getLong()), isLastValues, 4 );<br>break;<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>page = add( page, rowOffset, longToBinarySortOrder( expr.getLong()), isLastValues, 4 );<br>break;<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>case SQLTokenizer.LONGNVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>page = find( page, longToBinarySortOrder( expr.getLong()), 4, nodeList );<br>break;<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>case SQLTokenizer.LONGNVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
,{
"fileACode":"case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>page = find( page, longToBinarySortOrder( expr.getLong()), 4, nodeList );<br>break;<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>page = add( page, rowOffset, longToBinarySortOrder( expr.getLong()), isLastValues, 4 );<br>break;<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Index"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexDescription",
"duplicate": [
{
"fileACode":"raFile = Utils.openRaFile( file, database.isReadOnly() );<br>ByteBuffer buffer = ByteBuffer.allocate(8);<br>raFile.read(buffer);<br>buffer.position(0);<br>int magic   = buffer.getInt();<br>int version = buffer.getInt();<br>",
"cloneType":1,
"cloneCode":"raFile = Utils.openRaFile( file, database.isReadOnly() );<br>ByteBuffer buffer = ByteBuffer.allocate(8);<br>raFile.read(buffer);<br>buffer.position(0);<br>int magic   = buffer.getInt();<br>int version = buffer.getInt();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.TableView"
}
,{
"fileACode":"}catch(Throwable e){<br>if(raFile != null)<br>try{<br>raFile.close();<br>}catch(Exception e2){<br>DriverManager.println(e2.toString());<br>}<br>throw SmallSQLException.createFromException(e);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>if(raFile != null)<br>try{<br>raFile.close();<br>}catch(Exception e2){<br>DriverManager.println(e2.toString());<br>}<br>throw SmallSQLException.createFromException(e);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.TableView"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.TableView"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.TableView"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexScrollStatus",
"duplicate": [
{
"fileACode":"if(idx == -1){<br>if(status.nodeValue != null){<br>if(status.nodeValue instanceof IndexNode){<br>level++;<br>nodeStack.push(<br>new IndexNodeScrollStatus(    (IndexNode)status.nodeValue,<br>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),<br>scroll, level));<br>continue;<br>}else<br>return getReturnValue(status.nodeValue);<br>}<br>",
"cloneType":1,
"cloneCode":"if(idx == -1){<br>if(status.nodeValue != null){<br>if(status.nodeValue instanceof IndexNode){<br>level++;<br>nodeStack.push(<br>new IndexNodeScrollStatus(    (IndexNode)status.nodeValue,<br>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),<br>scroll, level));<br>continue;<br>}else<br>return getReturnValue(status.nodeValue);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexScrollStatus"
}
,{
"fileACode":"if(nodeStack.size() > 1){<br>nodeStack.pop();<br>continue;<br>}else{<br>return -1;<br>}<br>}<br>IndexNode node = status.nodes[idx];<br>",
"cloneType":1,
"cloneCode":"if(nodeStack.size() > 1){<br>nodeStack.pop();<br>continue;<br>}else{<br>status.idx = status.nodes.length;<br>return -1;<br>}<br>}<br>IndexNode node = status.nodes[idx];<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexScrollStatus"
}
,{
"fileACode":"if(nodeStack.size() > 1){<br>nodeStack.pop();<br>continue;<br>}else{<br>status.idx = status.nodes.length;<br>return -1;<br>}<br>}<br>IndexNode node = status.nodes[idx];<br>",
"cloneType":1,
"cloneCode":"if(nodeStack.size() > 1){<br>nodeStack.pop();<br>continue;<br>}else{<br>return -1;<br>}<br>}<br>IndexNode node = status.nodes[idx];<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexScrollStatus"
}
,{
"fileACode":"if(idx == -1){<br>if(status.nodeValue != null){<br>if(status.nodeValue instanceof IndexNode){<br>level++;<br>nodeStack.push(<br>new IndexNodeScrollStatus(    (IndexNode)status.nodeValue,<br>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),<br>scroll, level));<br>continue;<br>}else<br>return getReturnValue(status.nodeValue);<br>}<br>",
"cloneType":1,
"cloneCode":"if(idx == -1){<br>if(status.nodeValue != null){<br>if(status.nodeValue instanceof IndexNode){<br>level++;<br>nodeStack.push(<br>new IndexNodeScrollStatus(    (IndexNode)status.nodeValue,<br>(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),<br>scroll, level));<br>continue;<br>}else<br>return getReturnValue(status.nodeValue);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexScrollStatus"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexScrollStatus"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexScrollStatus"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexScrollStatus"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexScrollStatus"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Utils",
"duplicate": [
{
"fileACode":"StringBuffer buf = new StringBuffer(bytes.length << 1);<br>for(int i=0; i<bytes.length; i++){<br>buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );<br>buf.append( digits[ (bytes[i]     ) & 0x0F ] );<br>}<br>return buf.toString();<br>}<br>",
"cloneType":1,
"cloneCode":"StringBuffer buf = new StringBuffer(bytes.length << 1);<br>for(int i=0; i<bytes.length; i++){<br>buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );<br>buf.append( digits[ (bytes[i]     ) & 0x0F ] );<br>}<br>return buf.toString();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BasicTestCase"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BasicTestCase"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOther",
"duplicate": [
{
"fileACode":"assertTrue( rs.isBeforeFirst() );<br>assertFalse( rs.isFirst() );<br>assertFalse( rs.isLast() );<br>assertFalse( rs.isAfterLast() );<br>assertTrue( rs.next() );<br>assertFalse( rs.isBeforeFirst() );<br>assertTrue( rs.isFirst() );<br>assertTrue( rs.isLast() );<br>assertFalse( rs.isAfterLast() );<br>",
"cloneType":1,
"cloneCode":"assertTrue( rs.isBeforeFirst() );<br>assertFalse( rs.isFirst() );<br>assertFalse( rs.isLast() );<br>assertFalse( rs.isAfterLast() );<br>assertTrue( rs.first() );<br>assertFalse( rs.isBeforeFirst() );<br>assertTrue( rs.isFirst() );<br>assertTrue( rs.isLast() );<br>assertFalse( rs.isAfterLast() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOther"
}
,{
"fileACode":"assertTrue( rs.isBeforeFirst() );<br>assertFalse( rs.isFirst() );<br>assertFalse( rs.isLast() );<br>assertFalse( rs.isAfterLast() );<br>assertTrue( rs.first() );<br>assertFalse( rs.isBeforeFirst() );<br>assertTrue( rs.isFirst() );<br>assertTrue( rs.isLast() );<br>assertFalse( rs.isAfterLast() );<br>",
"cloneType":1,
"cloneCode":"assertTrue( rs.isBeforeFirst() );<br>assertFalse( rs.isFirst() );<br>assertFalse( rs.isLast() );<br>assertFalse( rs.isAfterLast() );<br>assertTrue( rs.next() );<br>assertFalse( rs.isBeforeFirst() );<br>assertTrue( rs.isFirst() );<br>assertTrue( rs.isLast() );<br>assertFalse( rs.isAfterLast() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOther"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOther"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOther"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestDataTypes",
"duplicate": [
{
"fileACode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>public void setUp(){<br>tearDown();<br>",
"cloneType":1,
"cloneCode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>public void setUp(){<br>tearDown();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestFunctions"
}
,{
"fileACode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestMoneyRounding"
}
,{
"fileACode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>public void setUp(){<br>tearDown();<br>",
"cloneType":1,
"cloneCode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>public void setUp(){<br>tearDown();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestFunctions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestMoneyRounding"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement",
"duplicate": [
{
"fileACode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>pr.execute();<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"});<br>assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>",
"cloneType":1,
"cloneCode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>pr.execute();<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key5')\", new int[]{2});<br>assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>pr.execute();<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"});<br>assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>",
"cloneType":1,
"cloneCode":"rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>pr.execute();<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key5')\", new int[]{2});<br>assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>",
"cloneType":1,
"cloneCode":"rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key5')\", new int[]{2}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>",
"cloneType":1,
"cloneCode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key5')\", new int[]{2}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneType":1,
"cloneCode":"assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key5')\", new int[]{2}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneType":1,
"cloneCode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key5')\", new int[]{2}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>",
"cloneType":1,
"cloneCode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneType":1,
"cloneCode":"rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key5')\", new int[]{2}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key5')\", new int[]{2}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>",
"cloneType":1,
"cloneCode":"rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>pr.execute();<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"});<br>assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>",
"cloneType":1,
"cloneCode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>pr.execute();<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key5')\", new int[]{2});<br>assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneType":1,
"cloneCode":"assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>pr.execute();<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key5')\", new int[]{2});<br>assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>",
"cloneType":1,
"cloneCode":"rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>pr.execute();<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"});<br>assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneType":1,
"cloneCode":"assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>pr.execute();<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key5')\", new int[]{2});<br>assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>",
"cloneType":1,
"cloneCode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>pr.execute();<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"});<br>assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneType":1,
"cloneCode":"assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneType":1,
"cloneCode":"assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>pr.execute();<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key5')\", new int[]{2});<br>assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>",
"cloneType":1,
"cloneCode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>pr.execute();<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>pr = con.prepareStatement(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"});<br>assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneType":1,
"cloneCode":"assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key5')\", new int[]{2}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneType":1,
"cloneCode":"assertEquals(1,pr.executeUpdate());<br>rs = pr.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
,{
"fileACode":"rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key5')\", new int[]{2}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneType":1,
"cloneCode":"rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>st.execute(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br>assertRowCount(1,rs);<br>assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"}));<br>rs = st.getGeneratedKeys();<br>assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br>assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br>assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br>assertRowCount(1,rs);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestStatement"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.NoFromResult",
"duplicate": [
{
"fileACode":"}<br>final boolean rowInserted(){<br>return false;<br>}<br>final boolean rowDeleted(){<br>return false;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean rowInserted(){<br>return false;<br>}<br>final boolean rowDeleted(){<br>return false;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MemoryResult"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MemoryResult"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Scrollable",
"duplicate": [
{
"fileACode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted(){<br>return rowSource.rowDeleted();<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean rowInserted() {<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted() {<br>return rowSource.rowDeleted();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Where"
}
,{
"fileACode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted(){<br>return rowSource.rowDeleted();<br>}<br>void nullRow() {<br>rowSource.nullRow();<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted(){<br>return rowSource.rowDeleted();<br>}<br>void nullRow() {<br>rowSource.nullRow();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
}
,{
"fileACode":"return false;<br>}<br>boolean last() throws Exception{<br>afterLast();<br>return previous();<br>}<br>",
"cloneType":1,
"cloneCode":"return false;<br>}<br>boolean last() throws Exception{<br>afterLast();<br>return previous();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
}
,{
"fileACode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted(){<br>return rowSource.rowDeleted();<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted() {<br>return rowSource.rowDeleted();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Distinct"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Where"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Distinct"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionCharLen",
"duplicate": [
{
"fileACode":"}<br>boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>String str = param1.getString();<br>",
"cloneType":1,
"cloneCode":"}<br>boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>String str = param1.getString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionOctetLen"
}
,{
"fileACode":"}<br>boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>String str = param1.getString();<br>",
"cloneType":1,
"cloneCode":"}<br>boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>String str = param1.getString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionBitLen"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionOctetLen"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionBitLen"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnInt",
"duplicate": [
{
"fileACode":"if(isNull()) return null;<br>return new MutableNumeric(getInt());<br>}<br>Object getObject() throws Exception {<br>if(isNull()) return null;<br>return Utils.getInteger(getInt());<br>}<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return null;<br>return new MutableNumeric(getInt());<br>}<br>Object getObject() throws Exception {<br>if(isNull()) return null;<br>return Utils.getInteger(getInt());<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTimestampDiff"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTimestampDiff"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSStatement",
"duplicate": [
{
"fileACode":"if(failed == null){<br>failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);<br>failed.initCause(ex);<br>}<br>failed.setNextException(ex);<br>}<br>}<br>batches.clear();<br>if(failed != null)<br>throw failed;<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"if(failed == null){<br>failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);<br>failed.initCause(ex);<br>}<br>failed.setNextException(ex);<br>}<br>}<br>batches.clear();<br>if(failed != null)<br>throw failed;<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSPreparedStatement"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSPreparedStatement"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableNumeric",
"duplicate": [
{
"fileACode":"if(num.scale < scale){<br>num.setScale(scale);<br>}else<br>if(num.scale > scale){<br>setScale(num.scale);<br>}<br>",
"cloneType":1,
"cloneCode":"if(num.scale < scale){<br>num.setScale(scale);<br>}else<br>if(num.scale > scale){<br>setScale(num.scale);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableNumeric"
}
,{
"fileACode":"if(num.scale < scale){<br>num.setScale(scale);<br>}else<br>if(num.scale > scale){<br>setScale(num.scale);<br>}<br>",
"cloneType":1,
"cloneCode":"if(num.scale < scale){<br>num.setScale(scale);<br>}else<br>if(num.scale > scale){<br>setScale(num.scale);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableNumeric"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableNumeric"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableNumeric"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table",
"duplicate": [
{
"fileACode":"}<br>if(serializeConnections.size() > 0){<br>Iterator values = locks.values().iterator();<br>while(values.hasNext()){<br>TableStorePage lock = (TableStorePage)values.next();<br>if(lock.con != con) return null;<br>}<br>}<br>tabLockConnection = con;<br>tabLockCount++;<br>TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);<br>",
"cloneType":1,
"cloneCode":"}<br>if(serializeConnections.size() > 0){<br>Iterator values = locks.values().iterator();<br>while(values.hasNext()){<br>TableStorePage lock = (TableStorePage)values.next();<br>if(lock.con != con) return null;<br>}<br>}<br>tabLockConnection = con;<br>tabLockCount++;<br>TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
}
,{
"fileACode":"}<br>}else{<br>prev.nextLock = lock.nextLock;<br>}<br>return;<br>}<br>prev = lock;<br>lock = lock.nextLock;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}else{<br>prev.nextLock = lock.nextLock;<br>}<br>return;<br>}<br>prev = lock;<br>lock = lock.nextLock;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
}
,{
"fileACode":"Iterator values = locks.values().iterator();<br>while(values.hasNext()){<br>TableStorePage lock = (TableStorePage)values.next();<br>if(lock.con != con) return null;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"Iterator values = locks.values().iterator();<br>while(values.hasNext()){<br>TableStorePage lock = (TableStorePage)values.next();<br>if(lock.con != con) return null;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
}
,{
"fileACode":"Iterator values = locks.values().iterator();<br>while(values.hasNext()){<br>TableStorePage lock = (TableStorePage)values.next();<br>if(lock.con != con) return null;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"Iterator values = locks.values().iterator();<br>while(values.hasNext()){<br>TableStorePage lock = (TableStorePage)values.next();<br>if(lock.con != con) return null;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
}
,{
"fileACode":"Iterator values = locks.values().iterator();<br>while(values.hasNext()){<br>TableStorePage lock = (TableStorePage)values.next();<br>if(lock.con != con) return null;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"Iterator values = locks.values().iterator();<br>while(values.hasNext()){<br>TableStorePage lock = (TableStorePage)values.next();<br>if(lock.con != con) return null;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
}
,{
"fileACode":"}<br>}else{<br>prev.nextLock = lock.nextLock;<br>}<br>return;<br>}<br>prev = lock;<br>lock = lock.nextLock;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}else{<br>prev.nextLock = lock.nextLock;<br>}<br>return;<br>}<br>prev = lock;<br>lock = lock.nextLock;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
}
,{
"fileACode":"}<br>if(serializeConnections.size() > 0){<br>Iterator values = locks.values().iterator();<br>while(values.hasNext()){<br>TableStorePage lock = (TableStorePage)values.next();<br>if(lock.con != con) return null;<br>}<br>}<br>tabLockConnection = con;<br>tabLockCount++;<br>TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);<br>",
"cloneType":1,
"cloneCode":"}<br>if(serializeConnections.size() > 0){<br>Iterator values = locks.values().iterator();<br>while(values.hasNext()){<br>TableStorePage lock = (TableStorePage)values.next();<br>if(lock.con != con) return null;<br>}<br>}<br>tabLockConnection = con;<br>tabLockCount++;<br>TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
}
,{
"fileACode":"}<br>@Override<br>void writeMagic(FileChannel raFile) throws Exception{<br>ByteBuffer buffer = ByteBuffer.allocate(8);<br>buffer.putInt(MAGIC_TABLE);<br>buffer.putInt(TABLE_VIEW_VERSION);<br>buffer.position(0);<br>raFile.write(buffer);<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>@Override<br>void writeMagic(FileChannel raFile) throws Exception{<br>ByteBuffer buffer = ByteBuffer.allocate(8);<br>buffer.putInt(MAGIC_VIEW);<br>buffer.putInt(TABLE_VIEW_VERSION);<br>buffer.position(0);<br>raFile.write(buffer);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.View"
}
,{
"fileACode":"Iterator values = locks.values().iterator();<br>while(values.hasNext()){<br>TableStorePage lock = (TableStorePage)values.next();<br>if(lock.con != con) return null;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"Iterator values = locks.values().iterator();<br>while(values.hasNext()){<br>TableStorePage lock = (TableStorePage)values.next();<br>if(lock.con != con) return null;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.View"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable",
"duplicate": [
{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testAbsoluteRelative() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testAbsoluteRelative() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testAbsoluteRelative() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testAbsoluteRelative() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testAbsoluteRelative() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testAbsoluteRelative() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testAbsoluteRelative() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testAbsoluteRelative() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testAbsoluteRelative() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testAbsoluteRelative() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}<br>public void testNextWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>public void testFirstWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException( \"01000\", 0, ex);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testAbsoluteRelative() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testAbsoluteRelative() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneType":1,
"cloneCode":"try{<br>rs.getString(\"v\");<br>fail(\"SQLException 'No current row' should be throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"01000\", 0, ex);<br>}<br>}<br>public void testPreviousWithWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br>assertRowCount( 0, \"Select * from Scrollable\");<br>con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from Scrollable\");<br>assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestScrollable"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SQLParser",
"duplicate": [
{
"fileACode":"try{<br>int maxRows = Integer.parseInt(token.getName(sql));<br>selCmd.setMaxRows(maxRows);<br>}catch(NumberFormatException e){<br>throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>int maxRows = Integer.parseInt(token.getName(sql));<br>selCmd.setMaxRows(maxRows);<br>}catch(NumberFormatException e){<br>throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SQLParser"
}
,{
"fileACode":"case SQLTokenizer.COMMA:<br>continue;<br>default:<br>throw new Error();<br>}<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.COMMA:<br>continue;<br>default:<br>throw new Error();<br>}<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SQLParser"
}
,{
"fileACode":"try{<br>int maxRows = Integer.parseInt(token.getName(sql));<br>selCmd.setMaxRows(maxRows);<br>}catch(NumberFormatException e){<br>throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>int maxRows = Integer.parseInt(token.getName(sql));<br>selCmd.setMaxRows(maxRows);<br>}catch(NumberFormatException e){<br>throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SQLParser"
}
,{
"fileACode":"case SQLTokenizer.COMMA:<br>continue;<br>default:<br>throw new Error();<br>}<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.COMMA:<br>continue;<br>default:<br>throw new Error();<br>}<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SQLParser"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SQLParser"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SQLParser"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SQLParser"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SQLParser"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.View",
"duplicate": [
{
"fileACode":"}<br>@Override<br>void writeMagic(FileChannel raFile) throws Exception{<br>ByteBuffer buffer = ByteBuffer.allocate(8);<br>buffer.putInt(MAGIC_VIEW);<br>buffer.putInt(TABLE_VIEW_VERSION);<br>buffer.position(0);<br>raFile.write(buffer);<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>@Override<br>void writeMagic(FileChannel raFile) throws Exception{<br>ByteBuffer buffer = ByteBuffer.allocate(8);<br>buffer.putInt(MAGIC_TABLE);<br>buffer.putInt(TABLE_VIEW_VERSION);<br>buffer.position(0);<br>raFile.write(buffer);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Table"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight",
"duplicate": [
{
"fileACode":"return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>int length  = param2.getInt();<br>",
"cloneType":1,
"cloneCode":"return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>int length = param2.getInt();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, bytes.length -length, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
}
,{
"fileACode":"return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, bytes.length -length, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
}
,{
"fileACode":"final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, bytes.length -length, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>",
"cloneType":1,
"cloneCode":"final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, bytes.length -length, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
}
,{
"fileACode":"final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, bytes.length -length, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLCase",
"duplicate": [
{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLTrim"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRTrim"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>return getString().getBytes();<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>return getString().getBytes();<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionUCase"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLTrim"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRTrim"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionUCase"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTimestampDiff",
"duplicate": [
{
"fileACode":"if(isNull()) return null;<br>return new MutableNumeric(getInt());<br>}<br>Object getObject() throws Exception {<br>if(isNull()) return null;<br>return Utils.getInteger(getInt());<br>}<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return null;<br>return new MutableNumeric(getInt());<br>}<br>Object getObject() throws Exception {<br>if(isNull()) return null;<br>return Utils.getInteger(getInt());<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnInt"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnInt"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Command",
"duplicate": [
{
"fileACode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
}
,{
"fileACode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
}
,{
"fileACode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods",
"duplicate": [
{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"try{<br>Statement st = con.createStatement();<br>st.execute(\"Create Table DuplicatedColumn(col INT)\");<br>try{<br>st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");<br>fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>Statement st = con.createStatement();<br>st.execute(\"Create Table DuplicatedColumn(col INT)\");<br>try{<br>st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");<br>fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>Statement st = con.createStatement();<br>st.execute(\"Create Table DuplicatedColumn(col INT)\");<br>try{<br>st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");<br>fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>Statement st = con.createStatement();<br>st.execute(\"Create Table DuplicatedColumn(col INT)\");<br>try{<br>st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");<br>fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"try{<br>Statement st = con.createStatement();<br>st.execute(\"Create Table DuplicatedColumn(col INT)\");<br>try{<br>st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");<br>fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>Statement st = con.createStatement();<br>st.execute(\"Create Table DuplicatedColumn(col INT)\");<br>try{<br>st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");<br>fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>Statement st = con.createStatement();<br>st.execute(\"Create Table DuplicatedColumn(col INT)\");<br>try{<br>st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");<br>fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>Statement st = con.createStatement();<br>st.execute(\"Create Table DuplicatedColumn(col INT)\");<br>try{<br>st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");<br>fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"try{<br>Statement st = con.createStatement();<br>st.execute(\"Create Table DuplicatedColumn(col INT)\");<br>try{<br>st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");<br>fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>Statement st = con.createStatement();<br>st.execute(\"Create Table DuplicatedColumn(col INT)\");<br>try{<br>st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");<br>fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isFirst();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.first();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.previous();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.last();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.isAfterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.afterLast();<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.absolute(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>try{<br>rs.relative(1);<br>fail(\"SQLException 'ResultSet is forward only' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.execute();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"try{<br>Statement st = con.createStatement();<br>st.execute(\"Create Table DuplicatedColumn(col INT)\");<br>try{<br>st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");<br>fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>Statement st = con.createStatement();<br>st.execute(\"Create Table DuplicatedColumn(col INT)\");<br>try{<br>st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");<br>fail(\"SQLException 'Duplicated Column' should be throw\");<br>}catch(SQLException e){<br>assertSQLException(\"01000\", 0, e);<br>}<br>}finally{<br>dropTable(con, \"DuplicatedColumn\");<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeQuery();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>pr.executeUpdate();<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
,{
"fileACode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeUpdate(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>try{<br>st.executeQuery(\"Select 1\");<br>fail(\"Exception should throw\");<br>}catch(SQLException ex){<br>assertSQLException(\"HY010\", 0, ex);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestExceptionMethods"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestJoins",
"duplicate": [
{
"fileACode":"a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneType":1,
"cloneCode":"a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(60000)\"  , new byte[54321],        new byte[]{12, 45, 2, 56, 89}),<br>a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"}<br>public void runTest() throws Exception{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");<br>assertFalse( \"To many rows\", rs.next() );<br>",
"cloneType":1,
"cloneCode":"}<br>public void runTest() throws Exception{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");<br>assertFalse( \"To many rows\", rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"a(\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>",
"cloneType":1,
"cloneCode":"a(\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>pr.execute();<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.small);<br>pr.execute();<br>pr.setObject( 1, testValue.large);<br>pr.setObject( 2, testValue.large);<br>pr.execute();<br>pr.setObject( 1, testValue.large);<br>pr.setObject( 2, testValue.small);<br>pr.execute();<br>pr.setObject( 1, null);<br>pr.setObject( 2, testValue.small);<br>pr.execute();<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, null);<br>pr.execute();<br>pr.setObject( 1, null);<br>pr.setObject( 2, null);<br>pr.execute();<br>",
"cloneType":1,
"cloneCode":"pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.large);<br>pr.execute();<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, testValue.small);<br>pr.execute();<br>pr.setObject( 1, testValue.large);<br>pr.setObject( 2, testValue.large);<br>pr.execute();<br>pr.setObject( 1, testValue.large);<br>pr.setObject( 2, testValue.small);<br>pr.execute();<br>pr.setObject( 1, null);<br>pr.setObject( 2, testValue.small);<br>pr.execute();<br>pr.setObject( 1, testValue.small);<br>pr.setObject( 2, null);<br>pr.execute();<br>pr.setObject( 1, null);<br>pr.setObject( 2, null);<br>pr.execute();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"}<br>private static TestValue a(String dataType, Object small, Object large){<br>TestValue value = new TestValue();<br>value.dataType  = dataType;<br>value.small     = small;<br>value.large     = large;<br>return value;<br>}<br>private static class TestValue{<br>String dataType;<br>Object small;<br>Object large;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>private static TestValue a(String dataType, Object small, Object large){<br>TestValue value = new TestValue();<br>value.dataType  = dataType;<br>value.small     = small;<br>value.large     = large;<br>return value;<br>}<br>private static class TestValue{<br>String dataType;<br>Object small;<br>Object large;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"private static final TestValue[] TESTS = new TestValue[]{<br>a(\"tinyint\"           , new Byte( (byte)3),     new Byte( (byte)4)),<br>a(\"byte\"              , new Byte( (byte)3),     new Byte( (byte)4)),<br>a(\"smallint\"          , new Short( (short)3),   new Short( (short)4)),<br>a(\"int\"               , new Integer(3),         new Integer(4)),<br>a(\"bigint\"            , new Long(3),            new Long(4)),<br>a(\"real\"              , new Float(3.45),        new Float(4.56)),<br>a(\"float\"             , new Float(3.45),        new Float(4.56)),<br>a(\"double\"            , new Double(3.45),       new Double(4.56)),<br>a(\"smallmoney\"        , new Float(3.45),        new Float(4.56)),<br>a(\"money\"             , new Float(3.45),        new Float(4.56)),<br>a(\"money\"             , new Double(3.45),       new Double(4.56)),<br>a(\"numeric(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),<br>a(\"decimal(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),<br>",
"cloneType":1,
"cloneCode":"private static final TestValue[] TESTS = new TestValue[]{<br>a(\"tinyint\"           , new Byte( (byte)3),     new Byte( (byte)4)),<br>a(\"byte\"              , new Byte( (byte)3),     new Byte( (byte)4)),<br>a(\"smallint\"          , new Short( (short)3),   new Short( (short)4)),<br>a(\"int\"               , new Integer(3),         new Integer(4)),<br>a(\"bigint\"            , new Long(3),            new Long(4)),<br>a(\"real\"              , new Float(3.45),        new Float(4.56)),<br>a(\"float\"             , new Float(3.45),        new Float(4.56)),<br>a(\"double\"            , new Double(3.45),       new Double(4.56)),<br>a(\"smallmoney\"        , new Float(3.45),        new Float(4.56)),<br>a(\"money\"             , new Float(3.45),        new Float(4.56)),<br>a(\"money\"             , new Double(3.45),       new Double(4.56)),<br>a(\"numeric(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),<br>a(\"decimal(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneType":1,
"cloneCode":"a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneType":1,
"cloneCode":"a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(60000)\"  , new byte[54321],        new byte[]{12, 45, 2, 56, 89}),<br>a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"a(\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneType":1,
"cloneCode":"a(\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),<br>a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),<br>a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),<br>a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),<br>a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"varbinary(60000)\"  , new byte[54321],        new byte[]{12, 45, 2, 56, 89}),<br>a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),<br>a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),<br>a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads",
"duplicate": [
{
"fileACode":"}catch(Throwable ex){<br>throwable = ex;<br>}<br>}<br>});<br>threadList.add(thread);<br>thread.start();<br>}<br>for(int i = 0; i < threadList.size(); i++){<br>Thread thread = (Thread)threadList.get(i);<br>thread.join(5000);<br>}<br>if(throwable != null){<br>throw throwable;<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable ex){<br>throwable = ex;<br>}<br>}<br>});<br>threadList.add(thread);<br>thread.start();<br>}<br>for(int i = 0; i < threadList.size(); i++){<br>Thread thread = (Thread)threadList.get(i);<br>thread.join(5000);<br>}<br>if(throwable != null){<br>throw throwable;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
}
,{
"fileACode":"}catch(Throwable ex){<br>throwable = ex;<br>}<br>}<br>});<br>threadList.add(thread);<br>thread.start();<br>}<br>for(int i = 0; i < threadList.size(); i++){<br>Thread thread = (Thread)threadList.get(i);<br>thread.join(5000);<br>}<br>if(throwable != null){<br>throw throwable;<br>}<br>assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");<br>}finally{<br>dropTable(con, \"ConcurrentWrite\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable ex){<br>throwable = ex;<br>}<br>}<br>});<br>threadList.add(thread);<br>thread.start();<br>}<br>for(int i = 0; i < threadList.size(); i++){<br>Thread thread = (Thread)threadList.get(i);<br>thread.join(5000);<br>}<br>if(throwable != null){<br>throw throwable;<br>}<br>assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");<br>}finally{<br>dropTable(con, \"ConcurrentWrite\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
}
,{
"fileACode":"}catch(Throwable ex){<br>throwable = ex;<br>}<br>}<br>});<br>threadList.add(thread);<br>thread.start();<br>}<br>for(int i = 0; i < threadList.size(); i++){<br>Thread thread = (Thread)threadList.get(i);<br>thread.join(5000);<br>}<br>if(throwable != null){<br>throw throwable;<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable ex){<br>throwable = ex;<br>}<br>}<br>});<br>threadList.add(thread);<br>thread.start();<br>}<br>for(int i = 0; i < threadList.size(); i++){<br>Thread thread = (Thread)threadList.get(i);<br>thread.join(5000);<br>}<br>if(throwable != null){<br>throw throwable;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
}
,{
"fileACode":"Statement st = con.createStatement();<br>try{<br>st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");<br>st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");<br>for(int i = 0; i < 200; i++){<br>Thread thread = new Thread(new Runnable(){<br>public void run(){<br>try{<br>",
"cloneType":1,
"cloneCode":"Statement st = con.createStatement();<br>try{<br>st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");<br>st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");<br>for(int i = 0; i < 200; i++){<br>Thread thread = new Thread(new Runnable(){<br>public void run(){<br>try{<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
}
,{
"fileACode":"}catch(Throwable ex){<br>throwable = ex;<br>}<br>}<br>});<br>threadList.add(thread);<br>thread.start();<br>}<br>for(int i = 0; i < threadList.size(); i++){<br>Thread thread = (Thread)threadList.get(i);<br>thread.join(5000);<br>}<br>if(throwable != null){<br>throw throwable;<br>}<br>assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");<br>}finally{<br>dropTable(con, \"ConcurrentWrite\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable ex){<br>throwable = ex;<br>}<br>}<br>});<br>threadList.add(thread);<br>thread.start();<br>}<br>for(int i = 0; i < threadList.size(); i++){<br>Thread thread = (Thread)threadList.get(i);<br>thread.join(5000);<br>}<br>if(throwable != null){<br>throw throwable;<br>}<br>assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");<br>}finally{<br>dropTable(con, \"ConcurrentWrite\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
}
,{
"fileACode":"Statement st = con.createStatement();<br>try{<br>st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");<br>st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");<br>for(int i = 0; i < 200; i++){<br>Thread thread = new Thread(new Runnable(){<br>public void run(){<br>try{<br>",
"cloneType":1,
"cloneCode":"Statement st = con.createStatement();<br>try{<br>st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");<br>st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");<br>for(int i = 0; i < 200; i++){<br>Thread thread = new Thread(new Runnable(){<br>public void run(){<br>try{<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
}
,{
"fileACode":"}catch(Throwable ex){<br>throwable = ex;<br>}<br>}<br>});<br>threadList.add(thread);<br>thread.start();<br>}<br>for(int i = 0; i < threadList.size(); i++){<br>Thread thread = (Thread)threadList.get(i);<br>thread.join(5000);<br>}<br>if(throwable != null){<br>throw throwable;<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable ex){<br>throwable = ex;<br>}<br>}<br>});<br>threadList.add(thread);<br>thread.start();<br>}<br>for(int i = 0; i < threadList.size(); i++){<br>Thread thread = (Thread)threadList.get(i);<br>thread.join(5000);<br>}<br>if(throwable != null){<br>throw throwable;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
}
,{
"fileACode":"}catch(Throwable ex){<br>throwable = ex;<br>}<br>}<br>});<br>threadList.add(thread);<br>thread.start();<br>}<br>for(int i = 0; i < threadList.size(); i++){<br>Thread thread = (Thread)threadList.get(i);<br>thread.join(5000);<br>}<br>if(throwable != null){<br>throw throwable;<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable ex){<br>throwable = ex;<br>}<br>}<br>});<br>threadList.add(thread);<br>thread.start();<br>}<br>for(int i = 0; i < threadList.size(); i++){<br>Thread thread = (Thread)threadList.get(i);<br>thread.join(5000);<br>}<br>if(throwable != null){<br>throw throwable;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestThreads"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic",
"duplicate": [
{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"switch(operation){<br>case IN:<br>case EQUALS_NULL:<br>case EQUALS:    return comp == 0;<br>case GREATER:   return comp >  0;<br>case GRE_EQU:   return comp >= 0;<br>case LESSER:    return comp <  0;<br>case LES_EQU:   return comp <= 0;<br>case UNEQUALS:  return comp != 0;<br>case BETWEEN:<br>",
"cloneType":1,
"cloneCode":"switch(operation){<br>case IN:<br>case EQUALS_NULL:<br>case EQUALS:    return comp == 0;<br>case GREATER:   return comp >  0;<br>case GRE_EQU:   return comp >= 0;<br>case LESSER:    return comp <  0;<br>case LES_EQU:   return comp <= 0;<br>case UNEQUALS:  return comp != 0;<br>case BETWEEN:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return null;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? Boolean.TRUE : Boolean.FALSE;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return getBytes();<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return new Integer( getInt() );<br>case SQLTokenizer.BIGINT:<br>return new Long( getLong() );<br>case SQLTokenizer.REAL:<br>return new Float( getFloat() );<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>return new Double( getDouble() );<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>return Money.createFromUnscaledValue( getMoney() );<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return getNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return null;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? Boolean.TRUE : Boolean.FALSE;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return getBytes();<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return new Integer( getInt() );<br>case SQLTokenizer.BIGINT:<br>return new Long( getLong() );<br>case SQLTokenizer.REAL:<br>return new Float( getFloat() );<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>return new Double( getDouble() );<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>return Money.createFromUnscaledValue( getMoney() );<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return getNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnP1"
}
,{
"fileACode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneType":1,
"cloneCode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneType":1,
"cloneCode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"switch(operation){<br>case IN:<br>case EQUALS_NULL:<br>case EQUALS:    return comp == 0;<br>case GREATER:   return comp >  0;<br>case GRE_EQU:   return comp >= 0;<br>case LESSER:    return comp <  0;<br>case LES_EQU:   return comp <= 0;<br>case UNEQUALS:  return comp != 0;<br>case BETWEEN:<br>",
"cloneType":1,
"cloneCode":"switch(operation){<br>case IN:<br>case EQUALS_NULL:<br>case EQUALS:    return comp == 0;<br>case GREATER:   return comp >  0;<br>case GRE_EQU:   return comp >= 0;<br>case LESSER:    return comp <  0;<br>case LES_EQU:   return comp <= 0;<br>case UNEQUALS:  return comp != 0;<br>case BETWEEN:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneType":1,
"cloneCode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"switch(operation){<br>case IN:<br>case EQUALS_NULL:<br>case EQUALS:    return comp == 0;<br>case GREATER:   return comp >  0;<br>case GRE_EQU:   return comp >= 0;<br>case LESSER:    return comp <  0;<br>case LES_EQU:   return comp <= 0;<br>case UNEQUALS:  return comp != 0;<br>case BETWEEN:<br>",
"cloneType":1,
"cloneCode":"switch(operation){<br>case IN:<br>case EQUALS_NULL:<br>case EQUALS:    return comp == 0;<br>case GREATER:   return comp >  0;<br>case GRE_EQU:   return comp >= 0;<br>case LESSER:    return comp <  0;<br>case LES_EQU:   return comp <= 0;<br>case UNEQUALS:  return comp != 0;<br>case BETWEEN:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneType":1,
"cloneCode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneType":1,
"cloneCode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"switch(operation){<br>case IN:<br>case EQUALS_NULL:<br>case EQUALS:    return comp == 0;<br>case GREATER:   return comp >  0;<br>case GRE_EQU:   return comp >= 0;<br>case LESSER:    return comp <  0;<br>case LES_EQU:   return comp <= 0;<br>case UNEQUALS:  return comp != 0;<br>case BETWEEN:<br>",
"cloneType":1,
"cloneCode":"switch(operation){<br>case IN:<br>case EQUALS_NULL:<br>case EQUALS:    return comp == 0;<br>case GREATER:   return comp >  0;<br>case GRE_EQU:   return comp >= 0;<br>case LESSER:    return comp <  0;<br>case LES_EQU:   return comp <= 0;<br>case UNEQUALS:  return comp != 0;<br>case BETWEEN:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneType":1,
"cloneCode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"switch(operation){<br>case IN:<br>case EQUALS_NULL:<br>case EQUALS:    return comp == 0;<br>case GREATER:   return comp >  0;<br>case GRE_EQU:   return comp >= 0;<br>case LESSER:    return comp <  0;<br>case LES_EQU:   return comp <= 0;<br>case UNEQUALS:  return comp != 0;<br>case BETWEEN:<br>",
"cloneType":1,
"cloneCode":"switch(operation){<br>case IN:<br>case EQUALS_NULL:<br>case EQUALS:    return comp == 0;<br>case GREATER:   return comp >  0;<br>case GRE_EQU:   return comp >= 0;<br>case LESSER:    return comp <  0;<br>case LES_EQU:   return comp <= 0;<br>case UNEQUALS:  return comp != 0;<br>case BETWEEN:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case OR:<br>case AND:<br>case NOT:<br>case LIKE:<br>case ISNULL:<br>case ISNOTNULL:<br>",
"cloneType":1,
"cloneCode":"case OR:<br>case AND:<br>case NOT:<br>case LIKE:<br>case ISNULL:<br>case ISNOTNULL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneType":1,
"cloneCode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"switch(operation){<br>case IN:<br>case EQUALS_NULL:<br>case EQUALS:    return comp == 0;<br>case GREATER:   return comp >  0;<br>case GRE_EQU:   return comp >= 0;<br>case LESSER:    return comp <  0;<br>case LES_EQU:   return comp <= 0;<br>case UNEQUALS:  return comp != 0;<br>case BETWEEN:<br>",
"cloneType":1,
"cloneCode":"switch(operation){<br>case IN:<br>case EQUALS_NULL:<br>case EQUALS:    return comp == 0;<br>case GREATER:   return comp >  0;<br>case GRE_EQU:   return comp >= 0;<br>case LESSER:    return comp <  0;<br>case LES_EQU:   return comp <= 0;<br>case UNEQUALS:  return comp != 0;<br>case BETWEEN:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case SQLTokenizer.LONGVARBINARY:<br>return getBytes();<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>return new DateTime( getLong(), dataType );<br>case SQLTokenizer.UNIQUEIDENTIFIER:<br>return getBytes();<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.LONGVARBINARY:<br>return getBytes();<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>return new DateTime( getLong(), dataType );<br>case SQLTokenizer.UNIQUEIDENTIFIER:<br>return getBytes();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnP1"
}
,{
"fileACode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return (long)getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneType":1,
"cloneCode":"int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>return getLongImpl();<br>case SQLTokenizer.REAL:<br>return getFloatImpl();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case OR:<br>case AND:<br>case NOT:<br>case LIKE:<br>case ISNULL:<br>case ISNOTNULL:<br>",
"cloneType":1,
"cloneCode":"case OR:<br>case AND:<br>case NOT:<br>case LIKE:<br>case ISNULL:<br>case ISNOTNULL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return 0;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return getIntImpl();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnP1"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnP1"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnP1",
"duplicate": [
{
"fileACode":"if(isNull()) return null;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? Boolean.TRUE : Boolean.FALSE;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return getBytes();<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return new Integer( getInt() );<br>case SQLTokenizer.BIGINT:<br>return new Long( getLong() );<br>case SQLTokenizer.REAL:<br>return new Float( getFloat() );<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>return new Double( getDouble() );<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>return Money.createFromUnscaledValue( getMoney() );<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return getNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"if(isNull()) return null;<br>int dataType = getDataType();<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return getBoolean() ? Boolean.TRUE : Boolean.FALSE;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return getBytes();<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>return new Integer( getInt() );<br>case SQLTokenizer.BIGINT:<br>return new Long( getLong() );<br>case SQLTokenizer.REAL:<br>return new Float( getFloat() );<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>return new Double( getDouble() );<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.SMALLMONEY:<br>return Money.createFromUnscaledValue( getMoney() );<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return getNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
,{
"fileACode":"case SQLTokenizer.LONGVARBINARY:<br>return getBytes();<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>return new DateTime( getLong(), dataType );<br>case SQLTokenizer.UNIQUEIDENTIFIER:<br>return getBytes();<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.LONGVARBINARY:<br>return getBytes();<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.SMALLDATETIME:<br>return new DateTime( getLong(), dataType );<br>case SQLTokenizer.UNIQUEIDENTIFIER:<br>return getBytes();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionArithmetic"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexDescriptions",
"duplicate": [
{
"fileACode":"}<br>final int size(){<br>return size;<br>}<br>final IndexDescription get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final int size(){<br>return size;<br>}<br>final Column get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Columns"
}
,{
"fileACode":"}<br>final int size(){<br>return size;<br>}<br>final IndexDescription get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final int size(){<br>return size;<br>}<br>final String get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Strings"
}
,{
"fileACode":"}<br>final int size(){<br>return size;<br>}<br>final IndexDescription get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final int size(){<br>return size;<br>}<br>final ForeignKey get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ForeignKeys"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Columns"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Strings"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ForeignKeys"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect",
"duplicate": [
{
"fileACode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
}
,{
"fileACode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
}
,{
"fileACode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Command"
}
,{
"fileACode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
}
,{
"fileACode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
}
,{
"fileACode":"String tableAlias = expr.getTableAlias();<br>if(tableAlias != null){<br>int t=0;<br>for(; t<tables.size(); t++){<br>DataSource fromEntry = tables.get(t);<br>if(tableAlias.equalsIgnoreCase( fromEntry.getAlias() )){<br>TableView table = fromEntry.getTableView();<br>",
"cloneType":1,
"cloneCode":"String tableAlias = expr.getTableAlias();<br>if(tableAlias != null){<br>int t = 0;<br>for(; t < tables.size(); t++){<br>DataSource fromEntry = tables.get(t);<br>if(tableAlias.equalsIgnoreCase(fromEntry.getAlias())){<br>TableView table = fromEntry.getTableView();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
}
,{
"fileACode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Command"
}
,{
"fileACode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
}
,{
"fileACode":"String tableAlias = expr.getTableAlias();<br>if(tableAlias != null){<br>int t = 0;<br>for(; t < tables.size(); t++){<br>DataSource fromEntry = tables.get(t);<br>if(tableAlias.equalsIgnoreCase(fromEntry.getAlias())){<br>TableView table = fromEntry.getTableView();<br>",
"cloneType":1,
"cloneCode":"String tableAlias = expr.getTableAlias();<br>if(tableAlias != null){<br>int t=0;<br>for(; t<tables.size(); t++){<br>DataSource fromEntry = tables.get(t);<br>if(tableAlias.equalsIgnoreCase( fromEntry.getAlias() )){<br>TableView table = fromEntry.getTableView();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
}
,{
"fileACode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Command"
}
,{
"fileACode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>con.rollback(savepoint);<br>throw SmallSQLException.createFromException(e);<br>}finally{<br>if(con.getAutoCommit()) con.commit();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Command"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Command"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Command"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandSelect"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Where",
"duplicate": [
{
"fileACode":"}<br>final long getRowPosition() {<br>return rowSource.getRowPosition();<br>}<br>final void setRowPosition(long rowPosition) throws Exception {<br>rowSource.setRowPosition(rowPosition);<br>",
"cloneType":1,
"cloneCode":"}<br>final long getRowPosition(){<br>return rowSource.getRowPosition();<br>}<br>final void setRowPosition(long rowPosition) throws Exception{<br>rowSource.setRowPosition(rowPosition);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
}
,{
"fileACode":"}<br>final void beforeFirst() throws Exception {<br>rowSource.beforeFirst();<br>row = 0;<br>}<br>final boolean first() throws Exception {<br>",
"cloneType":1,
"cloneCode":"}<br>final void beforeFirst() throws Exception {<br>rowSource.beforeFirst();<br>row = 0;<br>}<br>final boolean first() throws Exception {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Distinct"
}
,{
"fileACode":"}<br>final long getRowPosition() {<br>return rowSource.getRowPosition();<br>}<br>final void setRowPosition(long rowPosition) throws Exception {<br>rowSource.setRowPosition(rowPosition);<br>}<br>final void nullRow() {<br>rowSource.nullRow();<br>row = 0;<br>}<br>final void noRow() {<br>rowSource.noRow();<br>row = 0;<br>}<br>final boolean rowInserted() {<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted() {<br>return rowSource.rowDeleted();<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final long getRowPosition() {<br>return rowSource.getRowPosition();<br>}<br>final void setRowPosition(long rowPosition) throws Exception {<br>rowSource.setRowPosition(rowPosition);<br>}<br>final void nullRow() {<br>rowSource.nullRow();<br>row = 0;<br>}<br>final void noRow() {<br>rowSource.noRow();<br>row = 0;<br>}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted() {<br>return rowSource.rowDeleted();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Distinct"
}
,{
"fileACode":"}<br>final boolean rowInserted() {<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted() {<br>return rowSource.rowDeleted();<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted(){<br>return rowSource.rowDeleted();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Scrollable"
}
,{
"fileACode":"}<br>final boolean rowInserted() {<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted() {<br>return rowSource.rowDeleted();<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted(){<br>return rowSource.rowDeleted();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Distinct"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Distinct"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Scrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSConnection",
"duplicate": [
{
"fileACode":"}<br>public SQLWarning getWarnings(){<br>return null;<br>}<br>public void clearWarnings(){<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public SQLWarning getWarnings(){<br>return null;<br>}<br>public void clearWarnings(){<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MemoryResult",
"duplicate": [
{
"fileACode":"}<br>final boolean rowInserted(){<br>return false;<br>}<br>final boolean rowDeleted(){<br>return false;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean rowInserted(){<br>return false;<br>}<br>final boolean rowDeleted(){<br>return false;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.NoFromResult"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.NoFromResult"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnP1StringAndBinary",
"duplicate": [
{
"fileACode":"final boolean getBoolean() throws Exception {<br>if(isNull()) return false;<br>return Utils.string2boolean(getString().trim());<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>return Integer.parseInt(getString().trim());<br>}<br>final long getLong() throws Exception {<br>if(isNull()) return 0;<br>return Long.parseLong(getString().trim());<br>}<br>final float getFloat() throws Exception {<br>if(isNull()) return 0;<br>return Float.parseFloat(getString().trim());<br>}<br>final double getDouble() throws Exception {<br>if(isNull()) return 0;<br>return Double.parseDouble(getString().trim());<br>}<br>final long getMoney() throws Exception {<br>if(isNull()) return 0;<br>return Money.parseMoney(getString().trim());<br>}<br>final MutableNumeric getNumeric() throws Exception {<br>if(isNull()) return null;<br>return new MutableNumeric(getString().trim());<br>}<br>final Object getObject() throws Exception {<br>",
"cloneType":1,
"cloneCode":"final boolean getBoolean() throws Exception {<br>if(isNull()) return false;<br>return Utils.string2boolean(getString().trim());<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>return Integer.parseInt(getString().trim());<br>}<br>final long getLong() throws Exception {<br>if(isNull()) return 0;<br>return Long.parseLong(getString().trim());<br>}<br>final float getFloat() throws Exception {<br>if(isNull()) return 0;<br>return Float.parseFloat(getString().trim());<br>}<br>final double getDouble() throws Exception {<br>if(isNull()) return 0;<br>return Double.parseDouble(getString().trim());<br>}<br>final long getMoney() throws Exception {<br>if(isNull()) return 0;<br>return Money.parseMoney(getString().trim());<br>}<br>final MutableNumeric getNumeric() throws Exception {<br>if(isNull()) return null;<br>return new MutableNumeric(getString().trim());<br>}<br>final Object getObject() throws Exception {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnString"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnString"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy",
"duplicate": [
{
"fileACode":"rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Long oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Long oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 3;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>",
"cloneType":1,
"cloneCode":"oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_double() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>int oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>int oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"oldValue = newValue;<br>count++;<br>}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"oldValue = newValue;<br>count++;<br>}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"oldValue = newValue;<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"oldValue = newValue;<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 3;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>count++;<br>",
"cloneType":1,
"cloneCode":"oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>count++;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>int oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>int oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 3;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>",
"cloneType":1,
"cloneCode":"assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>",
"cloneType":1,
"cloneCode":"assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 3;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Long oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Long oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v ASC\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"oldValue = newValue;<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"oldValue = newValue;<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_double() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>",
"cloneType":1,
"cloneCode":"oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 3;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_double() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>",
"cloneType":1,
"cloneCode":"assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_double() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>",
"cloneType":1,
"cloneCode":"assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_double() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v ASC\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"oldValue = newValue;<br>count++;<br>}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"oldValue = newValue;<br>count++;<br>}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_double() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"oldValue = newValue;<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"oldValue = newValue;<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v ASC\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v ASC\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i\");<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_double() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_double() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>count++;<br>}<br>",
"cloneType":1,
"cloneCode":"while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>count++;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"oldValue = newValue;<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"oldValue = newValue;<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v ASC\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"oldValue = newValue;<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"oldValue = newValue;<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_double() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_double() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i\");<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>count++;<br>",
"cloneType":1,
"cloneCode":"oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 3;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>count++;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>count++;<br>}<br>",
"cloneType":1,
"cloneCode":"while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>assertTrue( oldValue.compareTo( newValue ) < 0 );<br>oldValue = newValue;<br>count++;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i\");<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_double() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_double() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"}catch(Throwable e){<br>e.printStackTrace();<br>}<br>}<br>public void testOrderBy_char() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>e.printStackTrace();<br>}<br>}<br>public void testTest() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestGroupBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>ResultSet rs;<br>int count;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br>rs.next();<br>rs.next();<br>rs.previous();<br>rs.last();<br>count = 0;<br>while(rs.previous()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>assertEquals( valueCount, count );<br>rs.beforeFirst();<br>count = -1;<br>while(rs.next()) count++;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"oldValue = newValue;<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"oldValue = newValue;<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v ASC\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(rs.next()){<br>String newValue = rs.getString(\"v\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>rs.close();<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i\");<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_Join() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init = true;<br>}catch(Throwable e){<br>e.printStackTrace();<br>}<br>}<br>public void testOrderBy_char() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"init = true;<br>}catch(Throwable e){<br>e.printStackTrace();<br>}<br>}<br>public void testTest() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestGroupBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_function() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_functionAscDesc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_real() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_GroupBy() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>String oldValue;<br>rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br>assertTrue( rs.next() );<br>oldValue = rs.getString(\"v\");<br>int count = 1;<br>while(oldValue != null && rs.next()){<br>String newValue = rs.getString(\"v\");<br>if(newValue != null){<br>assertTrue( oldValue.compareTo( newValue ) > 0 );<br>count++;<br>}<br>oldValue = newValue;<br>}<br>assertNull(oldValue);<br>assertFalse( rs.next() );<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_varchar_DescAsc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>",
"cloneType":1,
"cloneCode":"assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>assertNull(oldValue);<br>assertTrue( rs.next() );<br>oldValue = (Integer)rs.getObject(\"i\");<br>int count = 1;<br>while(rs.next()){<br>assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br>oldValue = (Integer)rs.getObject(\"i\");<br>count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_nvarchar() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_desc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void testOrderBy_int_asc() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>Integer oldValue;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_boolean() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"count++;<br>}<br>assertEquals( valueCount, count );<br>}<br>public void test_bigint_withDoublicateValues() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestGroupBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestGroupBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet",
"duplicate": [
{
"fileACode":"assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>}<br>",
"cloneType":1,
"cloneCode":"assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertFalse(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>}<br>",
"cloneType":1,
"cloneCode":"assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertTrue(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertTrue(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>",
"cloneType":1,
"cloneCode":"assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertFalse(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertTrue(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>}<br>",
"cloneType":1,
"cloneCode":"assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertFalse(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertFalse(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>",
"cloneType":1,
"cloneCode":"assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertTrue(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertTrue(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>}<br>",
"cloneType":1,
"cloneCode":"assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertFalse(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertTrue(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>",
"cloneType":1,
"cloneCode":"assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertFalse(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertFalse(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>",
"cloneType":1,
"cloneCode":"assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertTrue(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"rs.beforeFirst();<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>",
"cloneType":1,
"cloneCode":"rs.beforeFirst();<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>}<br>",
"cloneType":1,
"cloneCode":"assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertFalse(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>}<br>",
"cloneType":1,
"cloneCode":"assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertTrue(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertTrue(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>",
"cloneType":1,
"cloneCode":"assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertFalse(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"rs.beforeFirst();<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>",
"cloneType":1,
"cloneCode":"rs.beforeFirst();<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertTrue(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>",
"cloneType":1,
"cloneCode":"assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertFalse(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertFalse(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>",
"cloneType":1,
"cloneCode":"assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertTrue(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
,{
"fileACode":"assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertFalse(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>",
"cloneType":1,
"cloneCode":"assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"next\", rs.next() );<br>assertTrue(\"isFirst\", rs.isFirst() );<br>assertTrue(\"rowInserted\", rs.rowInserted() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>assertFalse(\"next\", rs.next() );<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"first\", rs.first() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertFalse(\"previous\", rs.previous() );<br>assertEquals(\"getRow\", 0, rs.getRow() );<br>assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertFalse(\"isAfterLast\", rs.isAfterLast() );<br>assertTrue(\"last\", rs.last() );<br>assertEquals(\"getRow\", 1, rs.getRow() );<br>assertTrue(\"isLast\", rs.isLast() );<br>rs.afterLast();<br>assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br>assertTrue(\"isAfterLast\", rs.isAfterLast() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestResultSet"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Identity",
"duplicate": [
{
"fileACode":"public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>return new Long(value);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>return new Long(value);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandInsert",
"duplicate": [
{
"fileACode":"keyColumnNames.add(column.getName());<br>keys.add(valueExpress.getObject());<br>break;<br>}<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"keyColumnNames.add(column.getName());<br>keys.add(valueExpress.getObject());<br>break;<br>}<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandInsert"
}
,{
"fileACode":"keyColumnNames.add(column.getName());<br>keys.add(valueExpress.getObject());<br>break;<br>}<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"keyColumnNames.add(column.getName());<br>keys.add(valueExpress.getObject());<br>break;<br>}<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandInsert"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandInsert"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.CommandInsert"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Distinct",
"duplicate": [
{
"fileACode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted() {<br>return rowSource.rowDeleted();<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted(){<br>return rowSource.rowDeleted();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Scrollable"
}
,{
"fileACode":"}<br>final long getRowPosition() {<br>return rowSource.getRowPosition();<br>}<br>final void setRowPosition(long rowPosition) throws Exception {<br>rowSource.setRowPosition(rowPosition);<br>}<br>final void nullRow() {<br>rowSource.nullRow();<br>row = 0;<br>}<br>final void noRow() {<br>rowSource.noRow();<br>row = 0;<br>}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted() {<br>return rowSource.rowDeleted();<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final long getRowPosition() {<br>return rowSource.getRowPosition();<br>}<br>final void setRowPosition(long rowPosition) throws Exception {<br>rowSource.setRowPosition(rowPosition);<br>}<br>final void nullRow() {<br>rowSource.nullRow();<br>row = 0;<br>}<br>final void noRow() {<br>rowSource.noRow();<br>row = 0;<br>}<br>final boolean rowInserted() {<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted() {<br>return rowSource.rowDeleted();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Where"
}
,{
"fileACode":"}<br>final long getRowPosition() {<br>return rowSource.getRowPosition();<br>}<br>final void setRowPosition(long rowPosition) throws Exception {<br>rowSource.setRowPosition(rowPosition);<br>",
"cloneType":1,
"cloneCode":"}<br>final long getRowPosition(){<br>return rowSource.getRowPosition();<br>}<br>final void setRowPosition(long rowPosition) throws Exception{<br>rowSource.setRowPosition(rowPosition);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
}
,{
"fileACode":"}<br>final void beforeFirst() throws Exception {<br>rowSource.beforeFirst();<br>row = 0;<br>}<br>final boolean first() throws Exception {<br>",
"cloneType":1,
"cloneCode":"}<br>final void beforeFirst() throws Exception {<br>rowSource.beforeFirst();<br>row = 0;<br>}<br>final boolean first() throws Exception {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Where"
}
,{
"fileACode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted() {<br>return rowSource.rowDeleted();<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted(){<br>return rowSource.rowDeleted();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Scrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Where"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Where"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRTrim",
"duplicate": [
{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLTrim"
}
,{
"fileACode":"byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>",
"cloneType":1,
"cloneCode":"byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLCase"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionUCase"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLTrim"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLCase"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionUCase"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReplace",
"duplicate": [
{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull() || param3.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull() || param3.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionSubstring"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionSubstring"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database",
"duplicate": [
{
"fileACode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneType":1,
"cloneCode":"List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneType":1,
"cloneCode":"for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneType":1,
"cloneCode":"List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneType":1,
"cloneCode":"for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneType":1,
"cloneCode":"for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneType":1,
"cloneCode":"for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>IndexDescription index = indexes.get(i);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>",
"cloneType":1,
"cloneCode":"rows.add(row);<br>}<br>}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>for(int i=0; i<indexes.size(); i++){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
,{
"fileACode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>}<br>Object[][] result = new Object[rows.size()][];<br>rows.toArray(result);<br>return result;<br>}<br>Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{<br>List rows = new ArrayList();<br>Strings tables = getTables(table);<br>for(int t=0; t<tables.size(); t++){<br>String tableName = tables.get(t);<br>TableView tab = getTableView( con, tableName);<br>if(!(tab instanceof Table)) continue;<br>IndexDescriptions indexes = ((Table)tab).indexes;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Database"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.language.Language_it",
"duplicate": [
{
"fileACode":"addMessages(ENTRIES);<br>}<br>public String[][] getEntries() {<br>return ENTRIES;<br>}<br>private final String[][] ENTRIES = {<br>",
"cloneType":1,
"cloneCode":"addMessages(ENTRIES);<br>}<br>public String[][] getEntries() {<br>return ENTRIES;<br>}<br>private final String[][] ENTRIES = {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.language.Language_de"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.language.Language_de"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime",
"duplicate": [
{
"fileACode":"buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>buf.append( details.hour < 12 ? \"AM\" : \"PM\" );<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>buf.append( details.hour < 12 ? \"AM\" : \"PM\" );<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append('T');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>",
"cloneType":1,
"cloneCode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append('T');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>",
"cloneType":1,
"cloneCode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append('T');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>",
"cloneType":1,
"cloneCode":"buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>",
"cloneType":1,
"cloneCode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append('T');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.year, 4, buf);<br>buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append('T');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.year, 4, buf);<br>buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.year, 4, buf);<br>buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.year, 4, buf);<br>buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>",
"cloneType":1,
"cloneCode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>",
"cloneType":1,
"cloneCode":"buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.year, 4, buf);<br>buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.year, 4, buf);<br>buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append('T');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append('T');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.year, 4, buf);<br>buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.year, 4, buf);<br>buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append('T');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>",
"cloneType":1,
"cloneCode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append('T');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append('T');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>",
"cloneType":1,
"cloneCode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>",
"cloneType":1,
"cloneCode":"buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append('T');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append('.');<br>formatMillis( details.millis, buf );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.year, 4, buf);<br>buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append('T');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.year, 4, buf);<br>buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>buf.append( details.hour < 12 ? \"AM\" : \"PM\" );<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>buf.append( details.hour < 12 ? \"AM\" : \"PM\" );<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>return buf.toString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf );<br>",
"cloneType":1,
"cloneCode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>buf.append(':');<br>formatMillis( details.millis, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"formatNumber( details.year, 4, buf);<br>buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"formatNumber( details.year, 4, buf);<br>buf.append('-');<br>formatNumber( details.month+1, 2, buf);<br>buf.append('-');<br>formatNumber( details.day, 2, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf);<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
,{
"fileACode":"buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatNumber( details.hour, 2, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneType":1,
"cloneCode":"buf.append( SHORT_MONTHS[ details.month ]);<br>buf.append(' ');<br>formatNumber( details.year, 4, buf);<br>buf.append(' ');<br>formatHour12( details.hour, buf );<br>buf.append(':');<br>formatNumber( details.minute, 2, buf);<br>buf.append(':');<br>formatNumber( details.second, 2, buf);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.DateTime"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BasicTestCase",
"duplicate": [
{
"fileACode":"StringBuffer buf = new StringBuffer(bytes.length << 1);<br>for(int i=0; i<bytes.length; i++){<br>buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );<br>buf.append( digits[ (bytes[i]     ) & 0x0F ] );<br>}<br>return buf.toString();<br>}<br>",
"cloneType":1,
"cloneCode":"StringBuffer buf = new StringBuffer(bytes.length << 1);<br>for(int i=0; i<bytes.length; i++){<br>buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );<br>buf.append( digits[ (bytes[i]     ) & 0x0F ] );<br>}<br>return buf.toString();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Utils"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Utils"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionConvert",
"duplicate": [
{
"fileACode":"byte[] buffer = new byte[length];<br>System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );<br>return buffer;<br>}<br>return bytes;<br>}<br>",
"cloneType":1,
"cloneCode":"byte[] buffer = new byte[length];<br>System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );<br>return buffer;<br>}<br>return bytes;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionConvert"
}
,{
"fileACode":"byte[] buffer = new byte[length];<br>System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );<br>return buffer;<br>}<br>return bytes;<br>}<br>",
"cloneType":1,
"cloneCode":"byte[] buffer = new byte[length];<br>System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );<br>return buffer;<br>}<br>return bytes;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionConvert"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionConvert"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionConvert"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionAbs",
"duplicate": [
{
"fileACode":"}<br>String getString() throws Exception{<br>Object obj = getObject();<br>if(obj == null) return null;<br>return obj.toString();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>String getString() throws Exception{<br>Object obj = getObject();<br>if(obj == null) return null;<br>return obj.toString();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionFloor"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionFloor"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Strings",
"duplicate": [
{
"fileACode":"}<br>final int size(){<br>return size;<br>}<br>final String get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final int size(){<br>return size;<br>}<br>final Column get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Columns"
}
,{
"fileACode":"}<br>final int size(){<br>return size;<br>}<br>final String get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final int size(){<br>return size;<br>}<br>final IndexDescription get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexDescriptions"
}
,{
"fileACode":"}<br>final int size(){<br>return size;<br>}<br>final String get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final int size(){<br>return size;<br>}<br>final ForeignKey get(int idx){<br>if (idx >= size)<br>throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br>return data[idx];<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ForeignKeys"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Columns"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.IndexDescriptions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ForeignKeys"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult",
"duplicate": [
{
"fileACode":"}<br>final long getRowPosition(){<br>return rowSource.getRowPosition();<br>}<br>final void setRowPosition(long rowPosition) throws Exception{<br>rowSource.setRowPosition(rowPosition);<br>",
"cloneType":1,
"cloneCode":"}<br>final long getRowPosition() {<br>return rowSource.getRowPosition();<br>}<br>final void setRowPosition(long rowPosition) throws Exception {<br>rowSource.setRowPosition(rowPosition);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Distinct"
}
,{
"fileACode":"if(!previous()){<br>return false;<br>}<br>}<br>}<br>return true;<br>}<br>",
"cloneType":1,
"cloneCode":"if(!previous()){<br>return false;<br>}<br>}<br>}<br>return true;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
}
,{
"fileACode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted(){<br>return rowSource.rowDeleted();<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted() {<br>return rowSource.rowDeleted();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Distinct"
}
,{
"fileACode":"if(!previous()){<br>return false;<br>}<br>}<br>}<br>return true;<br>}<br>",
"cloneType":1,
"cloneCode":"if(!previous()){<br>return false;<br>}<br>}<br>}<br>return true;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
}
,{
"fileACode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted(){<br>return rowSource.rowDeleted();<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean rowInserted() {<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted() {<br>return rowSource.rowDeleted();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Where"
}
,{
"fileACode":"return false;<br>}<br>boolean last() throws Exception{<br>afterLast();<br>return previous();<br>}<br>",
"cloneType":1,
"cloneCode":"return false;<br>}<br>boolean last() throws Exception{<br>afterLast();<br>return previous();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Scrollable"
}
,{
"fileACode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted(){<br>return rowSource.rowDeleted();<br>}<br>void nullRow() {<br>rowSource.nullRow();<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean rowInserted(){<br>return rowSource.rowInserted();<br>}<br>final boolean rowDeleted(){<br>return rowSource.rowDeleted();<br>}<br>void nullRow() {<br>rowSource.nullRow();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Scrollable"
}
,{
"fileACode":"}<br>final long getRowPosition(){<br>return rowSource.getRowPosition();<br>}<br>final void setRowPosition(long rowPosition) throws Exception{<br>rowSource.setRowPosition(rowPosition);<br>",
"cloneType":1,
"cloneCode":"}<br>final long getRowPosition() {<br>return rowSource.getRowPosition();<br>}<br>final void setRowPosition(long rowPosition) throws Exception {<br>rowSource.setRowPosition(rowPosition);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Where"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Distinct"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Distinct"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SortedResult"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Where"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Scrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Scrollable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Where"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong",
"duplicate": [
{
"fileACode":"}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
}
,{
"fileACode":"public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>return new Long(value);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>return new Long(value);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Identity"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
}
,{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
}
,{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.Identity"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionSubstring",
"duplicate": [
{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull() || param3.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull() || param3.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReplace"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReplace"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl",
"duplicate": [
{
"fileACode":"case SQLTokenizer.TIMESTAMP:<br>return readTimestamp();<br>case SQLTokenizer.TIME:<br>return readTime();<br>case SQLTokenizer.DATE:<br>return readDate();<br>case SQLTokenizer.SMALLDATETIME:<br>return readSmallDateTime();<br>default:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TIMESTAMP:<br>return readTimestamp();<br>case SQLTokenizer.TIME:<br>return readTime();<br>case SQLTokenizer.DATE:<br>return readDate();<br>case SQLTokenizer.SMALLDATETIME:<br>return readSmallDateTime();<br>default:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.INT:<br>case SQLTokenizer.REAL:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.INT:<br>case SQLTokenizer.REAL:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"MONEY\" });<br>default: throw new Error();<br>}<br>}<br>@Override<br>MutableNumeric getNumeric(int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });<br>default: throw new Error();<br>}<br>}<br>@Override<br>Object getObject(int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return readNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return readNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"default: throw new Error();<br>}<br>}<br>@Override<br>String getString( int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>",
"cloneType":1,
"cloneCode":"default: throw new Error();<br>}<br>}<br>@Override<br>MutableNumeric getNumeric(int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"default: throw new Error();<br>}<br>}<br>@Override<br>String getString( int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>",
"cloneType":1,
"cloneCode":"default: throw new Error();<br>}<br>}<br>@Override<br>Object getObject(int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"return readNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"return readNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.INT:<br>case SQLTokenizer.REAL:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.INT:<br>case SQLTokenizer.REAL:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.INT:<br>case SQLTokenizer.REAL:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.INT:<br>case SQLTokenizer.REAL:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.SMALLMONEY:<br>return readInt() / 10000;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return readNumeric().longValue();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.SMALLMONEY:<br>return readInt() / 10000;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return readNumeric().intValue();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });<br>default: throw new Error();<br>}<br>}<br>@Override<br>Object getObject(int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"MONEY\" });<br>default: throw new Error();<br>}<br>}<br>@Override<br>MutableNumeric getNumeric(int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.UNIQUEIDENTIFIER:<br>return Utils.bytes2unique( page, this.offset);<br>default: throw new Error();<br>}<br>}<br>@Override<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.UNIQUEIDENTIFIER:<br>return Utils.bytes2unique( page, this.offset);<br>default: throw new Error();<br>}<br>}<br>@Override<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>case SQLTokenizer.TINYINT:<br>offset++;<br>break;<br>case SQLTokenizer.SMALLINT:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>case SQLTokenizer.TINYINT:<br>offset++;<br>break;<br>case SQLTokenizer.SMALLINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"MONEY\" });<br>default: throw new Error();<br>}<br>}<br>@Override<br>MutableNumeric getNumeric(int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });<br>default: throw new Error();<br>}<br>}<br>@Override<br>Object getObject(int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"return readNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"return readNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TIMESTAMP:<br>return readTimestamp();<br>case SQLTokenizer.TIME:<br>return readTime();<br>case SQLTokenizer.DATE:<br>return readDate();<br>case SQLTokenizer.SMALLDATETIME:<br>return readSmallDateTime();<br>default:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TIMESTAMP:<br>return readTimestamp();<br>case SQLTokenizer.TIME:<br>return readTime();<br>case SQLTokenizer.DATE:<br>return readDate();<br>case SQLTokenizer.SMALLDATETIME:<br>return readSmallDateTime();<br>default:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"default: throw new Error();<br>}<br>}<br>@Override<br>MutableNumeric getNumeric(int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>",
"cloneType":1,
"cloneCode":"default: throw new Error();<br>}<br>}<br>@Override<br>String getString( int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return readNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return readNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.SMALLMONEY:<br>return readInt() / 10000;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return readNumeric().intValue();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.SMALLMONEY:<br>return readInt() / 10000;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return readNumeric().longValue();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TIMESTAMP:<br>return readTimestamp();<br>case SQLTokenizer.TIME:<br>return readTime();<br>case SQLTokenizer.DATE:<br>return readDate();<br>case SQLTokenizer.SMALLDATETIME:<br>return readSmallDateTime();<br>default:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TIMESTAMP:<br>return readTimestamp();<br>case SQLTokenizer.TIME:<br>return readTime();<br>case SQLTokenizer.DATE:<br>return readDate();<br>case SQLTokenizer.SMALLDATETIME:<br>return readSmallDateTime();<br>default:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>return readLongString();<br>case SQLTokenizer.JAVA_OBJECT:<br>ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());<br>ObjectInputStream ois = new ObjectInputStream(bais);<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>return readLongString();<br>case SQLTokenizer.JAVA_OBJECT:<br>ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());<br>ObjectInputStream ois = new ObjectInputStream(bais);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return readNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return readNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"default: throw new Error();<br>}<br>}<br>@Override<br>Object getObject(int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>",
"cloneType":1,
"cloneCode":"default: throw new Error();<br>}<br>}<br>@Override<br>String getString( int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.INT:<br>case SQLTokenizer.REAL:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.INT:<br>case SQLTokenizer.REAL:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });<br>default: throw new Error();<br>}<br>}<br>@Override<br>Object getObject(int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"MONEY\" });<br>default: throw new Error();<br>}<br>}<br>@Override<br>MutableNumeric getNumeric(int valueOffset, int dataType) throws Exception{<br>this.offset = valueOffset;<br>if(readBoolean()) return null;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TIMESTAMP:<br>return readTimestamp();<br>case SQLTokenizer.TIME:<br>return readTime();<br>case SQLTokenizer.DATE:<br>return readDate();<br>case SQLTokenizer.SMALLDATETIME:<br>return readSmallDateTime();<br>default:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TIMESTAMP:<br>return readTimestamp();<br>case SQLTokenizer.TIME:<br>return readTime();<br>case SQLTokenizer.DATE:<br>return readDate();<br>case SQLTokenizer.SMALLDATETIME:<br>return readSmallDateTime();<br>default:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>case SQLTokenizer.TINYINT:<br>offset++;<br>break;<br>case SQLTokenizer.SMALLINT:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>case SQLTokenizer.TINYINT:<br>offset++;<br>break;<br>case SQLTokenizer.SMALLINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"offset += 2;<br>break;<br>case SQLTokenizer.INT:<br>case SQLTokenizer.REAL:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>offset += 4;<br>break;<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.JAVA_OBJECT:<br>case SQLTokenizer.LONGVARBINARY:<br>case SQLTokenizer.BLOB:<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>case SQLTokenizer.TIMESTAMP:<br>offset += 8;<br>break;<br>",
"cloneType":1,
"cloneCode":"offset += 2;<br>break;<br>case SQLTokenizer.INT:<br>case SQLTokenizer.REAL:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>offset += 4;<br>break;<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.JAVA_OBJECT:<br>case SQLTokenizer.LONGVARBINARY:<br>case SQLTokenizer.BLOB:<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>case SQLTokenizer.TIMESTAMP:<br>offset += 8;<br>break;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"offset += 2;<br>break;<br>case SQLTokenizer.INT:<br>case SQLTokenizer.REAL:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>offset += 4;<br>break;<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.JAVA_OBJECT:<br>case SQLTokenizer.LONGVARBINARY:<br>case SQLTokenizer.BLOB:<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>case SQLTokenizer.TIMESTAMP:<br>offset += 8;<br>break;<br>",
"cloneType":1,
"cloneCode":"offset += 2;<br>break;<br>case SQLTokenizer.INT:<br>case SQLTokenizer.REAL:<br>case SQLTokenizer.SMALLMONEY:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>offset += 4;<br>break;<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.FLOAT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>case SQLTokenizer.JAVA_OBJECT:<br>case SQLTokenizer.LONGVARBINARY:<br>case SQLTokenizer.BLOB:<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>case SQLTokenizer.TIMESTAMP:<br>offset += 8;<br>break;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Utils.string2boolean( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>return readLongString();<br>case SQLTokenizer.JAVA_OBJECT:<br>ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());<br>ObjectInputStream ois = new ObjectInputStream(bais);<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>return readLongString();<br>case SQLTokenizer.JAVA_OBJECT:<br>ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());<br>ObjectInputStream ois = new ObjectInputStream(bais);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>return readFloat();<br>case SQLTokenizer.FLOAT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.UNIQUEIDENTIFIER:<br>return Utils.bytes2unique( page, this.offset);<br>default: throw new Error();<br>}<br>}<br>@Override<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.UNIQUEIDENTIFIER:<br>return Utils.bytes2unique( page, this.offset);<br>default: throw new Error();<br>}<br>}<br>@Override<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2float( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>case SQLTokenizer.REAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>return readLong();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2double( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return readNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>return readNumeric();<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Long.parseLong( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TIMESTAMP:<br>return readTimestamp();<br>case SQLTokenizer.TIME:<br>return readTime();<br>case SQLTokenizer.DATE:<br>return readDate();<br>case SQLTokenizer.SMALLDATETIME:<br>return readSmallDateTime();<br>default:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TIMESTAMP:<br>return readTimestamp();<br>case SQLTokenizer.TIME:<br>return readTime();<br>case SQLTokenizer.DATE:<br>return readDate();<br>case SQLTokenizer.SMALLDATETIME:<br>return readSmallDateTime();<br>default:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Float.parseFloat( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Double.parseDouble( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2long( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>return Utils.bytes2int( readBinary() );<br>case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Money.parseMoney( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return Integer.parseInt( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TIMESTAMP:<br>return readTimestamp();<br>case SQLTokenizer.TIME:<br>return readTime();<br>case SQLTokenizer.DATE:<br>return readDate();<br>case SQLTokenizer.SMALLDATETIME:<br>return readSmallDateTime();<br>default:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TIMESTAMP:<br>return readTimestamp();<br>case SQLTokenizer.TIME:<br>return readTime();<br>case SQLTokenizer.DATE:<br>return readDate();<br>case SQLTokenizer.SMALLDATETIME:<br>return readSmallDateTime();<br>default:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return new MutableNumeric( readString() );<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.NCHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.NVARCHAR:<br>return readString().getBytes();<br>case SQLTokenizer.CLOB:<br>case SQLTokenizer.NCLOB:<br>case SQLTokenizer.LONGNVARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.TINYINT:<br>return readUnsignedByte();<br>case SQLTokenizer.SMALLINT:<br>return readShort();<br>case SQLTokenizer.INT:<br>return readInt();<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
,{
"fileACode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneType":1,
"cloneCode":"this.offset = valueOffset;<br>if(readBoolean()) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return readBoolean() ? 1 : 0;<br>case SQLTokenizer.BINARY:<br>case SQLTokenizer.VARBINARY:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.StoreImpl"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList",
"duplicate": [
{
"fileACode":"result |= (((long)nextEntry) << shift);<br>if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>firstNode = true;<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>result = listEnum.resultStack[listEnum.stack];<br>",
"cloneType":1,
"cloneCode":"result |= (((long)nextEntry) << shift);<br>if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>loopToEndOfNode(listEnum);<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>result = listEnum.resultStack[listEnum.stack];<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
,{
"fileACode":"listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>firstNode = true;<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>",
"cloneType":1,
"cloneCode":"listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>loopToEndOfNode(listEnum);<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
,{
"fileACode":"if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>loopToEndOfNode(listEnum);<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>",
"cloneType":1,
"cloneCode":"if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>firstNode = true;<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
,{
"fileACode":"}<br>firstNode = false;<br>if(shift != 0) offset += pointerSize;<br>}<br>shift -= 16;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>firstNode = false;<br>if(shift != 0) offset += pointerSize;<br>}<br>shift -= 16;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
,{
"fileACode":"result |= (((long)nextEntry) << shift);<br>if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>loopToEndOfNode(listEnum);<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>",
"cloneType":1,
"cloneCode":"result |= (((long)nextEntry) << shift);<br>if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>firstNode = true;<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
,{
"fileACode":"result |= (((long)nextEntry) << shift);<br>if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>",
"cloneType":1,
"cloneCode":"result |= (((long)nextEntry) << shift);<br>if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
,{
"fileACode":"result |= (((long)nextEntry) << shift);<br>if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>loopToEndOfNode(listEnum);<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>result = listEnum.resultStack[listEnum.stack];<br>",
"cloneType":1,
"cloneCode":"result |= (((long)nextEntry) << shift);<br>if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>firstNode = true;<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>result = listEnum.resultStack[listEnum.stack];<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
,{
"fileACode":"if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>firstNode = true;<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>result = listEnum.resultStack[listEnum.stack];<br>",
"cloneType":1,
"cloneCode":"if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>loopToEndOfNode(listEnum);<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>result = listEnum.resultStack[listEnum.stack];<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
,{
"fileACode":"result |= (((long)nextEntry) << shift);<br>if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>",
"cloneType":1,
"cloneCode":"result |= (((long)nextEntry) << shift);<br>if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
,{
"fileACode":"result |= (((long)nextEntry) << shift);<br>if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>firstNode = true;<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>",
"cloneType":1,
"cloneCode":"result |= (((long)nextEntry) << shift);<br>if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>loopToEndOfNode(listEnum);<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
,{
"fileACode":"listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>loopToEndOfNode(listEnum);<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>",
"cloneType":1,
"cloneCode":"listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>firstNode = true;<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
,{
"fileACode":"}<br>firstNode = false;<br>if(shift != 0) offset += pointerSize;<br>}<br>shift -= 16;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>firstNode = false;<br>if(shift != 0) offset += pointerSize;<br>}<br>shift -= 16;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
,{
"fileACode":"if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>firstNode = true;<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>",
"cloneType":1,
"cloneCode":"if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>loopToEndOfNode(listEnum);<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
,{
"fileACode":"if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>loopToEndOfNode(listEnum);<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>result = listEnum.resultStack[listEnum.stack];<br>",
"cloneType":1,
"cloneCode":"if(listEnum.stack>=3){<br>listEnum.offsetStack[listEnum.stack] = offset;<br>return result;<br>}<br>listEnum.offsetStack[listEnum.stack] = offset+pointerSize;<br>offset = getPointer();<br>shift -= 16;<br>listEnum.stack++;<br>listEnum.resultStack[listEnum.stack] = result;<br>firstNode = true;<br>}else{<br>shift += 16;<br>listEnum.stack--;<br>if(listEnum.stack<0) return -1;<br>result = listEnum.resultStack[listEnum.stack];<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.LongTreeList"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionBitLen",
"duplicate": [
{
"fileACode":"}<br>boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>String str = param1.getString();<br>",
"cloneType":1,
"cloneCode":"}<br>boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>String str = param1.getString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionCharLen"
}
,{
"fileACode":"}<br>boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>String str = param1.getString();<br>",
"cloneType":1,
"cloneCode":"}<br>boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>String str = param1.getString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionOctetLen"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionCharLen"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionOctetLen"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger",
"duplicate": [
{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestAlterTable",
"duplicate": [
{
"fileACode":"fail(\"Alter Table should not work on a table with a lock.\");<br>} catch (SQLException ex) {<br>assertSQLException( \"01000\", 0, ex );<br>}<br>rs.next();<br>}finally{<br>con.setTransactionIsolation(isolation);<br>con.setAutoCommit(true);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Alter Table should not work on a table with a lock.\");<br>} catch (SQLException ex) {<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}finally{<br>con.setTransactionIsolation(isolation);<br>con.setAutoCommit(true);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestAlterTable"
}
,{
"fileACode":"fail(\"Alter Table should not work on a table with a lock.\");<br>} catch (SQLException ex) {<br>assertSQLException( \"01000\", 0, ex );<br>}<br>}finally{<br>con.setTransactionIsolation(isolation);<br>con.setAutoCommit(true);<br>}<br>",
"cloneType":1,
"cloneCode":"fail(\"Alter Table should not work on a table with a lock.\");<br>} catch (SQLException ex) {<br>assertSQLException( \"01000\", 0, ex );<br>}<br>rs.next();<br>}finally{<br>con.setTransactionIsolation(isolation);<br>con.setAutoCommit(true);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestAlterTable"
}
,{
"fileACode":"}<br>public void tearDown(){<br>try {<br>dropTable( AllTests.getConnection(), table );<br>} catch (SQLException ex) {<br>ex.printStackTrace();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public void tearDown(){<br>try {<br>dropTable( AllTests.getConnection(), table );<br>} catch (SQLException ex) {<br>ex.printStackTrace();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestAlterTable2"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestAlterTable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestAlterTable"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestAlterTable2"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLeft",
"duplicate": [
{
"fileACode":"return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>int length = param2.getInt();<br>",
"cloneType":1,
"cloneCode":"return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>int length  = param2.getInt();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
}
,{
"fileACode":"byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>",
"cloneType":1,
"cloneCode":"byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRTrim"
}
,{
"fileACode":"final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>",
"cloneType":1,
"cloneCode":"final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, bytes.length -length, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
}
,{
"fileACode":"return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, bytes.length -length, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
}
,{
"fileACode":"final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, bytes.length -length, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, bytes.length -length, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, 0, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull() || param2.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>int length = param2.getInt();<br>if(bytes.length <= length) return bytes;<br>byte[] b = new byte[length];<br>System.arraycopy(bytes, bytes.length -length, b, 0, length);<br>return b;<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>String str = param1.getString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRTrim"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRight"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestLanguage",
"duplicate": [
{
"fileACode":"}<br>}<br>finally {<br>conn.close();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>finally {<br>conn.close();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestLanguage"
}
,{
"fileACode":"}<br>}<br>finally {<br>conn.close();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>finally {<br>conn.close();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestLanguage"
}
,{
"fileACode":"try {<br>recreateTestTab(stat);<br>stat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");<br>fail();<br>}<br>catch(SQLException e) {<br>assertMessage(e, \"La tabella/vista '\" + TABLE_NAME + \"' è già esistente.\");<br>}<br>",
"cloneType":1,
"cloneCode":"try {<br>recreateTestTab(stat);<br>stat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");<br>fail();<br>}<br>catch (SQLException e) {<br>assertMessage(e, \"La tabella/vista '\" + TABLE_NAME + \"' è già esistente.\");<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestLanguage"
}
,{
"fileACode":"try {<br>recreateTestTab(stat);<br>stat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");<br>fail();<br>}<br>catch (SQLException e) {<br>assertMessage(e, \"La tabella/vista '\" + TABLE_NAME + \"' è già esistente.\");<br>}<br>",
"cloneType":1,
"cloneCode":"try {<br>recreateTestTab(stat);<br>stat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");<br>fail();<br>}<br>catch(SQLException e) {<br>assertMessage(e, \"La tabella/vista '\" + TABLE_NAME + \"' è già esistente.\");<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestLanguage"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestLanguage"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestLanguage"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestLanguage"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestLanguage"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScroll",
"duplicate": [
{
"fileACode":"if(!result){<br>switch(type){<br>case Join.LEFT_JOIN:<br>case Join.FULL_JOIN:<br>isOuterValid = false;<br>right.nullRow();<br>return true;<br>}<br>",
"cloneType":1,
"cloneCode":"if(!result){<br>switch(type){<br>case Join.LEFT_JOIN:<br>case Join.FULL_JOIN:<br>if(isOuterValid){<br>isOuterValid = false;<br>right.nullRow();<br>return true;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScroll"
}
,{
"fileACode":"result = left.next();<br>if(result){<br>result = right.first();<br>if(!result){<br>switch(type){<br>case Join.LEFT_JOIN:<br>case Join.FULL_JOIN:<br>isOuterValid = false;<br>",
"cloneType":1,
"cloneCode":"result = left.next();<br>if(result){<br>result = right.first();<br>if(!result){<br>switch(type){<br>case Join.LEFT_JOIN:<br>case Join.FULL_JOIN:<br>isOuterValid = false;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScroll"
}
,{
"fileACode":"if(!result){<br>switch(type){<br>case Join.LEFT_JOIN:<br>case Join.FULL_JOIN:<br>if(isOuterValid){<br>isOuterValid = false;<br>right.nullRow();<br>return true;<br>}<br>",
"cloneType":1,
"cloneCode":"if(!result){<br>switch(type){<br>case Join.LEFT_JOIN:<br>case Join.FULL_JOIN:<br>isOuterValid = false;<br>right.nullRow();<br>return true;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScroll"
}
,{
"fileACode":"result = left.next();<br>if(result){<br>result = right.first();<br>if(!result){<br>switch(type){<br>case Join.LEFT_JOIN:<br>case Join.FULL_JOIN:<br>isOuterValid = false;<br>",
"cloneType":1,
"cloneCode":"result = left.next();<br>if(result){<br>result = right.first();<br>if(!result){<br>switch(type){<br>case Join.LEFT_JOIN:<br>case Join.FULL_JOIN:<br>isOuterValid = false;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScroll"
}
,{
"fileACode":"if(result){<br>result = right.first();<br>if(!result){<br>switch(type){<br>case Join.LEFT_JOIN:<br>case Join.FULL_JOIN:<br>isOuterValid = false;<br>right.nullRow();<br>return true;<br>}<br>}else fullRightRowCounter++;<br>",
"cloneType":1,
"cloneCode":"if(result){<br>result = right.first();<br>if(!result){<br>switch(type){<br>case Join.LEFT_JOIN:<br>case Join.FULL_JOIN:<br>isOuterValid = false;<br>isBeforeFirst = false;<br>right.nullRow();<br>return true;<br>}<br>}else fullRightRowCounter++;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScroll"
}
,{
"fileACode":"if(result){<br>result = right.first();<br>if(!result){<br>switch(type){<br>case Join.LEFT_JOIN:<br>case Join.FULL_JOIN:<br>isOuterValid = false;<br>isBeforeFirst = false;<br>right.nullRow();<br>return true;<br>}<br>}else fullRightRowCounter++;<br>",
"cloneType":1,
"cloneCode":"if(result){<br>result = right.first();<br>if(!result){<br>switch(type){<br>case Join.LEFT_JOIN:<br>case Join.FULL_JOIN:<br>isOuterValid = false;<br>right.nullRow();<br>return true;<br>}<br>}else fullRightRowCounter++;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScroll"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScroll"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScroll"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScroll"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScroll"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScroll"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.JoinScroll"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound",
"duplicate": [
{
"fileACode":"boolean isNull() throws Exception{<br>return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>",
"cloneType":1,
"cloneCode":"boolean isNull() throws Exception{<br>return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
}
,{
"fileACode":"if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
}
,{
"fileACode":"}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value = Math.rint( value );<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value -= value % 1;<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
}
,{
"fileACode":"boolean isNull() throws Exception{<br>return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value = Math.rint( value );<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"boolean isNull() throws Exception{<br>return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value -= value % 1;<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
}
,{
"fileACode":"return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value = Math.rint( value );<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value -= value % 1;<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
}
,{
"fileACode":"boolean isNull() throws Exception{<br>return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value = Math.rint( value );<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>",
"cloneType":1,
"cloneCode":"boolean isNull() throws Exception{<br>return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value -= value % 1;<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
}
,{
"fileACode":"}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value = Math.rint( value );<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value -= value % 1;<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
}
,{
"fileACode":"return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value = Math.rint( value );<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>",
"cloneType":1,
"cloneCode":"return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value -= value % 1;<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat",
"duplicate": [
{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
}
,{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
}
,{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
}
,{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionOctetLen",
"duplicate": [
{
"fileACode":"}<br>boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>String str = param1.getString();<br>",
"cloneType":1,
"cloneCode":"}<br>boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>String str = param1.getString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionCharLen"
}
,{
"fileACode":"}<br>boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>String str = param1.getString();<br>",
"cloneType":1,
"cloneCode":"}<br>boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>String str = param1.getString();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionBitLen"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionCharLen"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionBitLen"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLTrim",
"duplicate": [
{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionUCase"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLCase"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>byte[] bytes = param1.getBytes();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRTrim"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionUCase"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLCase"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRTrim"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionTruncate",
"duplicate": [
{
"fileACode":"if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
}
,{
"fileACode":"boolean isNull() throws Exception{<br>return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value -= value % 1;<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>",
"cloneType":1,
"cloneCode":"boolean isNull() throws Exception{<br>return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value = Math.rint( value );<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
}
,{
"fileACode":"return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value -= value % 1;<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value = Math.rint( value );<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
}
,{
"fileACode":"boolean isNull() throws Exception{<br>return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>",
"cloneType":1,
"cloneCode":"boolean isNull() throws Exception{<br>return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
}
,{
"fileACode":"}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value -= value % 1;<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value = Math.rint( value );<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
}
,{
"fileACode":"boolean isNull() throws Exception{<br>return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value -= value % 1;<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"boolean isNull() throws Exception{<br>return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value = Math.rint( value );<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
}
,{
"fileACode":"return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value -= value % 1;<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>",
"cloneType":1,
"cloneCode":"return param1.isNull() || param2.isNull();<br>}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value = Math.rint( value );<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
}
,{
"fileACode":"}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value -= value % 1;<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>final double getDouble() throws Exception{<br>if(isNull()) return 0;<br>final int places = param2.getInt();<br>double value = param1.getDouble();<br>long factor = 1;<br>if(places > 0){<br>for(int i=0; i<places; i++){<br>factor *= 10;<br>}<br>value *= factor;<br>}else{<br>for(int i=0; i>places; i--){<br>factor *= 10;<br>}<br>value /= factor;<br>}<br>value = Math.rint( value );<br>if(places > 0){<br>value /= factor;<br>}else{<br>value *= factor;<br>}<br>return value;<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRound"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestFunctions",
"duplicate": [
{
"fileACode":"this.testValue = testValue;<br>}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>public void setUp(){<br>tearDown();<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>",
"cloneType":1,
"cloneCode":"this.testValue = testValue;<br>}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>public void setUp(){<br>tearDown();<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestMoneyRounding"
}
,{
"fileACode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>public void setUp(){<br>tearDown();<br>",
"cloneType":1,
"cloneCode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>public void setUp(){<br>tearDown();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestDataTypes"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestMoneyRounding"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestDataTypes"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionFloor",
"duplicate": [
{
"fileACode":"}<br>String getString() throws Exception{<br>Object obj = getObject();<br>if(obj == null) return null;<br>return obj.toString();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>String getString() throws Exception{<br>Object obj = getObject();<br>if(obj == null) return null;<br>return obj.toString();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionAbs"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionAbs"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions",
"duplicate": [
{
"fileACode":"assertRowCount( 4, \"Select * from transactions\");<br>con.commit();<br>assertRowCount( 4, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"assertRowCount( 4, \"Select * from transactions\");<br>con.commit();<br>assertRowCount( 4, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br>assertRowCount( 4, \"Select * from transactions\");<br>con.rollback();<br>assertRowCount( 1, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br>assertRowCount( 4, \"Select * from transactions\");<br>con.rollback();<br>assertRowCount( 0, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>assertEquals( 0, rs2.getInt(1) );<br>}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>}<br>",
"cloneType":1,
"cloneCode":"con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>assertEquals( 1, rs2.getInt(1) );<br>}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertRowCount( 0, \"Select * from transactions\");<br>con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>assertEquals( 0, rs2.getInt(1) );<br>}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>",
"cloneType":1,
"cloneCode":"assertRowCount( 0, \"Select * from transactions\");<br>con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>assertEquals( 1, rs2.getInt(1) );<br>}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>con.rollback( savepoint );<br>con.commit();<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>}finally{<br>",
"cloneType":1,
"cloneCode":"assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>con.rollback(savepoint);<br>con.commit();<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>}finally{<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>",
"cloneType":1,
"cloneCode":"con1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>assertEquals( 0, rs2.getInt(1) );<br>}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>",
"cloneType":1,
"cloneCode":"con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>assertEquals( 1, rs2.getInt(1) );<br>}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testInsertRow_withRightWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertRowCount( 0, \"Select * from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\") );<br>assertEqualsRsValue(\"qwert\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\") );<br>assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\") );<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>Savepoint savepoint = con.setSavepoint();<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\") );<br>assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>",
"cloneType":1,
"cloneCode":"assertRowCount(0, \"Select * from transactions\");<br>assertEquals(1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\"));<br>assertEqualsRsValue(\"qwert\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>con.setAutoCommit(false);<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\"));<br>assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\"));<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>Savepoint savepoint = con.setSavepoint();<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\"));<br>assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertFalse( rs.next() );<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"assertFalse( rs.next() );<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>assertEquals( 1, rs2.getInt(1) );<br>}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>}<br>",
"cloneType":1,
"cloneCode":"con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>assertEquals( 0, rs2.getInt(1) );<br>}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testInsertRow_withRightWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>",
"cloneType":1,
"cloneCode":"con1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertFalse( rs.next() );<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"assertFalse( rs.next() );<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertRowCount( 0, \"Select * from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\") );<br>assertEqualsRsValue(\"qwert\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\") );<br>assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\") );<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>Savepoint savepoint = con.setSavepoint();<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\") );<br>assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"assertRowCount(0, \"Select * from transactions\");<br>assertEquals(1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\"));<br>assertEqualsRsValue(\"qwert\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>con.setAutoCommit(false);<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\"));<br>assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\"));<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>Savepoint savepoint = con.setSavepoint();<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\"));<br>assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertRowCount( 2, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br>assertRowCount( 4, \"Select * from transactions\");<br>con.rollback();<br>assertRowCount( 1, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>",
"cloneType":1,
"cloneCode":"assertRowCount( 2, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br>assertRowCount( 4, \"Select * from transactions\");<br>con.rollback();<br>assertRowCount( 0, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testInsertRow_withRightWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>",
"cloneType":1,
"cloneCode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\"));<br>assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\"));<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>Savepoint savepoint = con.setSavepoint();<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\"));<br>assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>",
"cloneType":1,
"cloneCode":"assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\") );<br>assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\") );<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>Savepoint savepoint = con.setSavepoint();<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\") );<br>assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>con.rollback(savepoint);<br>con.commit();<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>}finally{<br>",
"cloneType":1,
"cloneCode":"assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>con.rollback( savepoint );<br>con.commit();<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>}finally{<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertRowCount( 2, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br>assertRowCount( 4, \"Select * from transactions\");<br>con.rollback();<br>assertRowCount( 1, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"assertRowCount( 2, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br>assertRowCount( 4, \"Select * from transactions\");<br>con.rollback();<br>assertRowCount( 0, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testInsertRow_withRightWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertRowCount(0, \"Select * from transactions\");<br>assertEquals(1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\"));<br>assertEqualsRsValue(\"qwert\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>con.setAutoCommit(false);<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\"));<br>assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\"));<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>Savepoint savepoint = con.setSavepoint();<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\"));<br>assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>",
"cloneType":1,
"cloneCode":"assertRowCount( 0, \"Select * from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\") );<br>assertEqualsRsValue(\"qwert\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\") );<br>assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\") );<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>Savepoint savepoint = con.setSavepoint();<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\") );<br>assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertRowCount(0, \"Select * from transactions\");<br>assertEquals(1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\"));<br>assertEqualsRsValue(\"qwert\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>con.setAutoCommit(false);<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\"));<br>assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\"));<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>Savepoint savepoint = con.setSavepoint();<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\"));<br>assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"assertRowCount( 0, \"Select * from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\") );<br>assertEqualsRsValue(\"qwert\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\") );<br>assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\") );<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>Savepoint savepoint = con.setSavepoint();<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\") );<br>assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>try{<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>try{<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertRowCount( 4, \"Select * from transactions\");<br>con.commit();<br>assertRowCount( 4, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"assertRowCount( 4, \"Select * from transactions\");<br>con.commit();<br>assertRowCount( 4, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>assertEquals( 1, rs2.getInt(1) );<br>}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>",
"cloneType":1,
"cloneCode":"con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>assertEquals( 0, rs2.getInt(1) );<br>}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>",
"cloneType":1,
"cloneCode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertRowCount( 2, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br>assertRowCount( 4, \"Select * from transactions\");<br>con.rollback();<br>assertRowCount( 0, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>",
"cloneType":1,
"cloneCode":"assertRowCount( 2, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br>assertRowCount( 4, \"Select * from transactions\");<br>con.rollback();<br>assertRowCount( 1, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testInsertRow_withRightWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testInsertRow_withRightWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testInsertRow_withRightWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertRowCount( 2, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br>assertRowCount( 4, \"Select * from transactions\");<br>con.rollback();<br>assertRowCount( 0, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"assertRowCount( 2, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br>assertRowCount( 4, \"Select * from transactions\");<br>con.rollback();<br>assertRowCount( 1, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\") );<br>assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\") );<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>Savepoint savepoint = con.setSavepoint();<br>assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\") );<br>assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>",
"cloneType":1,
"cloneCode":"assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\"));<br>assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\"));<br>assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>Savepoint savepoint = con.setSavepoint();<br>assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\"));<br>assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br>assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"rs.beforeFirst();<br>assertTrue( rs.next() );<br>assertEquals(\"qwert2\", rs.getString(\"v\"));<br>assertFalse( rs.next() );<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>",
"cloneType":1,
"cloneCode":"rs.beforeFirst();<br>assertTrue( rs.next() );<br>assertEquals(\"qwert2\", rs.getString(\"v\"));<br>assertFalse( rs.next() );<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"rs.beforeFirst();<br>assertTrue( rs.next() );<br>assertEquals(\"qwert2\", rs.getString(\"v\"));<br>assertFalse( rs.next() );<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>",
"cloneType":1,
"cloneCode":"rs.beforeFirst();<br>assertTrue( rs.next() );<br>assertEquals(\"qwert2\", rs.getString(\"v\"));<br>assertFalse( rs.next() );<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"assertRowCount( 0, \"Select * from transactions\");<br>con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>assertEquals( 1, rs2.getInt(1) );<br>}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>",
"cloneType":1,
"cloneCode":"assertRowCount( 0, \"Select * from transactions\");<br>con1.setAutoCommit(false);<br>con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br>ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");<br>assertTrue( rs2.next() );<br>assertEquals( 0, rs2.getInt(1) );<br>}finally{<br>dropTable(con1, \"transactions\");<br>con1.setAutoCommit(true);<br>con2.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testInsertRow_withRightWhere() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br>assertRowCount( 4, \"Select * from transactions\");<br>con.rollback();<br>assertRowCount( 0, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br>assertRowCount( 4, \"Select * from transactions\");<br>con.rollback();<br>assertRowCount( 1, \"Select * from transactions\");<br>}finally{<br>try{<br>con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
,{
"fileACode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testRollbackWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>",
"cloneType":1,
"cloneCode":"con.createStatement().execute(\"Drop Table transactions\");<br>}catch(Throwable e){e.printStackTrace();}<br>con.setAutoCommit(true);<br>}<br>}<br>public void testCommitWithOneCommitRow() throws Exception{<br>Connection con = AllTests.getConnection();<br>try{<br>con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br>assertRowCount( 0, \"Select * from transactions\");<br>con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br>assertRowCount( 1, \"Select * from transactions\");<br>con.setAutoCommit(false);<br>con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br>assertRowCount( 2, \"Select * from transactions\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestTransactions"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue",
"duplicate": [
{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>String str = expr.getString();<br>if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) > 0)<br>value = str;<br>break;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>MutableNumeric newValue = expr.getNumeric();<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>String str = expr.getString();<br>if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) < 0)<br>value = str;<br>break;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>MutableNumeric newValue = expr.getNumeric();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"if(obj == null) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return (obj == Boolean.TRUE) ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(obj == null) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return (obj == Boolean.TRUE) ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>String str = expr.getString();<br>if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) > 0)<br>value = str;<br>break;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>String str = expr.getString();<br>if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) < 0)<br>value = str;<br>break;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"if(value == null){<br>if(expr.isNull())<br>dataType = expr.getDataType();<br>else<br>initValue( expr );<br>}else if(!expr.isNull()){<br>switch(dataType){<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>",
"cloneType":1,
"cloneCode":"if(value == null){<br>if(expr.isNull())<br>dataType = expr.getDataType();<br>else<br>initValue( expr );<br>}else if(!expr.isNull()){<br>switch(dataType){<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>String str = expr.getString();<br>if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) < 0)<br>value = str;<br>break;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>MutableNumeric newValue = expr.getNumeric();<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>String str = expr.getString();<br>if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) > 0)<br>value = str;<br>break;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>MutableNumeric newValue = expr.getNumeric();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>String str = expr.getString();<br>if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) < 0)<br>value = str;<br>break;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.CHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>String str = expr.getString();<br>if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) > 0)<br>value = str;<br>break;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>return ((Number)obj).longValue();<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>return ((Number)obj).doubleValue();<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"break;<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>String str = expr.getString();<br>if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) > 0)<br>value = str;<br>break;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"break;<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>String str = expr.getString();<br>if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) < 0)<br>value = str;<br>break;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>return ((Number)obj).longValue();<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>return ((DateTime)obj).getTimeMillis();<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>return ((Number)obj).doubleValue();<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>return ((DateTime)obj).getTimeMillis();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"break;<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>String str = expr.getString();<br>if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) < 0)<br>value = str;<br>break;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneType":1,
"cloneCode":"break;<br>case SQLTokenizer.CHAR:<br>case SQLTokenizer.VARCHAR:<br>case SQLTokenizer.LONGVARCHAR:<br>String str = expr.getString();<br>if(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) > 0)<br>value = str;<br>break;<br>case SQLTokenizer.NUMERIC:<br>case SQLTokenizer.DECIMAL:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"if(obj == null) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>return (obj.equals(Boolean.TRUE)) ? 1 : 0;<br>case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneType":1,
"cloneCode":"if(obj == null) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>return (obj.equals(Boolean.TRUE)) ? 1 : 0;<br>case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"if(value == null){<br>if(expr.isNull())<br>dataType = expr.getDataType();<br>else<br>initValue( expr );<br>}else if(!expr.isNull()){<br>switch(dataType){<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>",
"cloneType":1,
"cloneCode":"if(value == null){<br>if(expr.isNull())<br>dataType = expr.getDataType();<br>else<br>initValue( expr );<br>}else if(!expr.isNull()){<br>switch(dataType){<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"if(obj == null) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>return (obj.equals(Boolean.TRUE)) ? 1 : 0;<br>case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneType":1,
"cloneCode":"if(obj == null) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>return (obj.equals(Boolean.TRUE)) ? 1 : 0;<br>case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DOUBLE:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>return ((Number)obj).doubleValue();<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>return ((DateTime)obj).getTimeMillis();<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>return ((Number)obj).longValue();<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>return ((DateTime)obj).getTimeMillis();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"if(obj == null) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return (obj == Boolean.TRUE) ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>",
"cloneType":1,
"cloneCode":"if(obj == null) return 0;<br>switch(dataType){<br>case SQLTokenizer.BIT:<br>case SQLTokenizer.BOOLEAN:<br>return (obj == Boolean.TRUE) ? 1 : 0;<br>case SQLTokenizer.TINYINT:<br>case SQLTokenizer.SMALLINT:<br>case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
,{
"fileACode":"case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>return ((Number)obj).doubleValue();<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>",
"cloneType":1,
"cloneCode":"case SQLTokenizer.INT:<br>case SQLTokenizer.BIGINT:<br>case SQLTokenizer.DOUBLE:<br>case SQLTokenizer.MONEY:<br>return ((Number)obj).longValue();<br>case SQLTokenizer.TIMESTAMP:<br>case SQLTokenizer.TIME:<br>case SQLTokenizer.DATE:<br>case SQLTokenizer.SMALLDATETIME:<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionValue"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnString",
"duplicate": [
{
"fileACode":"final boolean getBoolean() throws Exception {<br>if(isNull()) return false;<br>return Utils.string2boolean(getString().trim());<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>return Integer.parseInt(getString().trim());<br>}<br>final long getLong() throws Exception {<br>if(isNull()) return 0;<br>return Long.parseLong(getString().trim());<br>}<br>final float getFloat() throws Exception {<br>if(isNull()) return 0;<br>return Float.parseFloat(getString().trim());<br>}<br>final double getDouble() throws Exception {<br>if(isNull()) return 0;<br>return Double.parseDouble(getString().trim());<br>}<br>final long getMoney() throws Exception {<br>if(isNull()) return 0;<br>return Money.parseMoney(getString().trim());<br>}<br>final MutableNumeric getNumeric() throws Exception {<br>if(isNull()) return null;<br>return new MutableNumeric(getString().trim());<br>}<br>final Object getObject() throws Exception {<br>",
"cloneType":1,
"cloneCode":"final boolean getBoolean() throws Exception {<br>if(isNull()) return false;<br>return Utils.string2boolean(getString().trim());<br>}<br>final int getInt() throws Exception {<br>if(isNull()) return 0;<br>return Integer.parseInt(getString().trim());<br>}<br>final long getLong() throws Exception {<br>if(isNull()) return 0;<br>return Long.parseLong(getString().trim());<br>}<br>final float getFloat() throws Exception {<br>if(isNull()) return 0;<br>return Float.parseFloat(getString().trim());<br>}<br>final double getDouble() throws Exception {<br>if(isNull()) return 0;<br>return Double.parseDouble(getString().trim());<br>}<br>final long getMoney() throws Exception {<br>if(isNull()) return 0;<br>return Money.parseMoney(getString().trim());<br>}<br>final MutableNumeric getNumeric() throws Exception {<br>if(isNull()) return null;<br>return new MutableNumeric(getString().trim());<br>}<br>final Object getObject() throws Exception {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnP1StringAndBinary"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionReturnP1StringAndBinary"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.language.Language_de",
"duplicate": [
{
"fileACode":"addMessages(ENTRIES);<br>}<br>public String[][] getEntries() {<br>return ENTRIES;<br>}<br>private final String[][] ENTRIES = {<br>",
"cloneType":1,
"cloneCode":"addMessages(ENTRIES);<br>}<br>public String[][] getEntries() {<br>return ENTRIES;<br>}<br>private final String[][] ENTRIES = {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.language.Language_it"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.language.Language_it"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement",
"duplicate": [
{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Date getDate(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Timestamp getTimestamp(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = expr.isNull();<br>return expr.getBoolean();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>return expr.getBoolean();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Date getDate(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Time getTime(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Time getTime(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Timestamp getTimestamp(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public double getDouble(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public long getLong(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public double getDouble(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public long getLong(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public long getLong(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public double getDouble(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public long getLong(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public double getDouble(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public BigDecimal getBigDecimal(int i) throws SQLException {<br>try{<br>MutableNumeric obj = getValue(i).getNumeric();<br>wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public BigDecimal getBigDecimal(int i, int scale) throws SQLException {<br>try{<br>MutableNumeric obj = getValue(i).getNumeric();<br>wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal(scale);<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = expr.isNull();<br>return expr.getFloat();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>return expr.getFloat();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public BigDecimal getBigDecimal(int i, int scale) throws SQLException {<br>try{<br>MutableNumeric obj = getValue(i).getNumeric();<br>wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal(scale);<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public BigDecimal getBigDecimal(int i) throws SQLException {<br>try{<br>MutableNumeric obj = getValue(i).getNumeric();<br>wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Time getTime(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Timestamp getTimestamp(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Date getDate(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Time getTime(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>return expr.getLong();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal(scale);<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>if(wasNull) return null;<br>return obj.toBigDecimal(scale);<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Timestamp getTimestamp(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTimestamp( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>public Date getDate(int i) throws SQLException {<br>try{<br>Expression expr = getValue(i);<br>wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getDate( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
}
,{
"fileACode":"wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>if(wasNull) return null;<br>return DateTime.getTime( expr.getLong() );<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = obj == null;<br>return obj;<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
,{
"fileACode":"wasNull = expr.isNull();<br>return expr.getInt();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"wasNull = expr.isNull();<br>return expr.getInt();<br>}catch(Exception e){<br>throw SmallSQLException.createFromException( e );<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSCallableStatement"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.SSResultSet"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestGroupBy",
"duplicate": [
{
"fileACode":"}catch(Throwable e){<br>e.printStackTrace();<br>}<br>}<br>public void testTest() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"}catch(Throwable e){<br>e.printStackTrace();<br>}<br>}<br>public void testOrderBy_char() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
,{
"fileACode":"init = true;<br>}catch(Throwable e){<br>e.printStackTrace();<br>}<br>}<br>public void testTest() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneType":1,
"cloneCode":"init = true;<br>}catch(Throwable e){<br>e.printStackTrace();<br>}<br>}<br>public void testOrderBy_char() throws Exception{<br>init();<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>ResultSet rs;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOrderBy"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableDouble",
"duplicate": [
{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
}
,{
"fileACode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>",
"cloneType":1,
"cloneCode":"this.value = value;<br>}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
}
,{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>public Object getImmutableObject(){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
,{
"fileACode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return (float)value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public double doubleValue() {<br>return value;<br>}<br>public float floatValue() {<br>return value;<br>}<br>public int intValue() {<br>return (int)value;<br>}<br>public long longValue() {<br>return (long)value;<br>}<br>public String toString(){<br>return String.valueOf(value);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableLong"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableInteger"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.MutableFloat"
],
"selfLink":false
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest",
"duplicate": [
{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"try{<br>java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");<br>byte bytes[] = new byte[1024];<br>for(int i=0; i<rowCount; i++){<br>fos.write(bytes);<br>}<br>fos.close();<br>java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");<br>long time = -System.currentTimeMillis();<br>",
"cloneType":1,
"cloneCode":"try{<br>java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");<br>byte bytes[] = new byte[1024];<br>for(int i=0; i<rowCount; i++){<br>fos.write(bytes);<br>}<br>fos.close();<br>java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");<br>long time = -System.currentTimeMillis();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>",
"cloneType":1,
"cloneCode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>",
"cloneType":1,
"cloneCode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>",
"cloneType":1,
"cloneCode":"pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"try{<br>Statement st1 = con.createStatement();<br>ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>",
"cloneType":1,
"cloneCode":"try{<br>Statement st1 = con.createStatement();<br>ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>",
"cloneType":1,
"cloneCode":"pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount)<br>System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");<br>else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount)<br>System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");<br>else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneType":1,
"cloneCode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"for (int i=0; i<rowCount; i++){<br>pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>",
"cloneType":1,
"cloneCode":"for (int i=0; i<rowCount; i++){<br>pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"try{<br>Statement st1 = con.createStatement();<br>ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");<br>return;<br>}<br>}<br>st1.close();<br>",
"cloneType":1,
"cloneCode":"try{<br>Statement st1 = con.createStatement();<br>ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");<br>return;<br>}<br>}<br>st1.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneType":1,
"cloneCode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneType":1,
"cloneCode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"return;<br>}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"return;<br>}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"try{<br>Statement st1 = con.createStatement();<br>ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");<br>return;<br>}<br>}<br>st1.close();<br>",
"cloneType":1,
"cloneCode":"try{<br>Statement st1 = con.createStatement();<br>ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");<br>return;<br>}<br>}<br>st1.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneType":1,
"cloneCode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"try{<br>java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");<br>byte bytes[] = new byte[1024];<br>for(int i=0; i<rowCount; i++){<br>fos.write(bytes);<br>}<br>fos.close();<br>java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");<br>long time = -System.currentTimeMillis();<br>",
"cloneType":1,
"cloneCode":"try{<br>java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");<br>byte bytes[] = new byte[1024];<br>for(int i=0; i<rowCount; i++){<br>fos.write(bytes);<br>}<br>fos.close();<br>java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");<br>long time = -System.currentTimeMillis();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"for (int i=0; i<rowCount; i++){<br>pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>",
"cloneType":1,
"cloneCode":"for (int i=0; i<rowCount; i++){<br>pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneType":1,
"cloneCode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.execute(\"drop procedure sp_\"+tableName);<br>st.close();<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>",
"cloneType":1,
"cloneCode":"if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.close();<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>fis.close();<br>java.io.File file = new java.io.File(tableName+\".bin\");<br>file.delete();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"pr.close();<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>fis.close();<br>java.io.File file = new java.io.File(tableName+\".bin\");<br>file.delete();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"rs.insertRow();<br>}<br>time += System.currentTimeMillis();<br>rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>",
"cloneType":1,
"cloneCode":"rs.insertRow();<br>}<br>time += System.currentTimeMillis();<br>rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>",
"cloneType":1,
"cloneCode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneType":1,
"cloneCode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>",
"cloneType":1,
"cloneCode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneType":1,
"cloneCode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"return;<br>}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"return;<br>}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"try{<br>Statement st1 = con.createStatement();<br>ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>",
"cloneType":1,
"cloneCode":"try{<br>Statement st1 = con.createStatement();<br>ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneType":1,
"cloneCode":"pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.close();<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>fis.close();<br>java.io.File file = new java.io.File(tableName+\".bin\");<br>file.delete();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"pr.close();<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>fis.close();<br>java.io.File file = new java.io.File(tableName+\".bin\");<br>file.delete();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneType":1,
"cloneCode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.execute(\"drop procedure sp_\"+tableName);<br>st.close();<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneType":1,
"cloneCode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>",
"cloneType":1,
"cloneCode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>",
"cloneType":1,
"cloneCode":"pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>",
"cloneType":1,
"cloneCode":"pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneType":1,
"cloneCode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"long time = -System.currentTimeMillis();<br>for (int i=0; i<rowCount; i++){<br>pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneType":1,
"cloneCode":"long time = -System.currentTimeMillis();<br>for (int i=0; i<rowCount; i++){<br>pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>",
"cloneType":1,
"cloneCode":"int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneType":1,
"cloneCode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>",
"cloneType":1,
"cloneCode":"int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"long time = -System.currentTimeMillis();<br>for (int i=0; i<rowCount; i++){<br>pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneType":1,
"cloneCode":"long time = -System.currentTimeMillis();<br>for (int i=0; i<rowCount; i++){<br>pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");<br>return;<br>}<br>}<br>st1.close();<br>",
"cloneType":1,
"cloneCode":"ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");<br>return;<br>}<br>}<br>st1.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.execute(\"drop procedure sp_\"+tableName);<br>st.close();<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"try{<br>Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );<br>ResultSet rs = st.executeQuery(\"SELECT * FROM \"+tableName);<br>long time = -System.currentTimeMillis();<br>for (int i=0; i<rowCount; i++){<br>rs.moveToInsertRow();<br>",
"cloneType":1,
"cloneCode":"try{<br>Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );<br>ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);<br>long time = -System.currentTimeMillis();<br>for (int i=0; i<rowCount; i++){<br>rs.moveToInsertRow();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>",
"cloneType":1,
"cloneCode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"rs.insertRow();<br>}<br>time += System.currentTimeMillis();<br>rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>",
"cloneType":1,
"cloneCode":"rs.insertRow();<br>}<br>time += System.currentTimeMillis();<br>rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>",
"cloneType":1,
"cloneCode":"pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>",
"cloneType":1,
"cloneCode":"pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneType":1,
"cloneCode":"pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>",
"cloneType":1,
"cloneCode":"pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");<br>return;<br>}<br>}<br>st1.close();<br>",
"cloneType":1,
"cloneCode":"ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");<br>return;<br>}<br>}<br>st1.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"Statement st1 = con.createStatement();<br>ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");<br>return;<br>}<br>}<br>st1.close();<br>",
"cloneType":1,
"cloneCode":"Statement st1 = con.createStatement();<br>ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");<br>return;<br>}<br>}<br>st1.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>",
"cloneType":1,
"cloneCode":"if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.execute(\"drop procedure sp_\"+tableName);<br>st.close();<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>",
"cloneType":1,
"cloneCode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneType":1,
"cloneCode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"long time = -System.currentTimeMillis();<br>for (int i=0; i<rowCount; i++){<br>pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>",
"cloneType":1,
"cloneCode":"long time = -System.currentTimeMillis();<br>for (int i=0; i<rowCount; i++){<br>pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>",
"cloneType":1,
"cloneCode":"pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"Statement st1 = con.createStatement();<br>ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");<br>return;<br>}<br>}<br>st1.close();<br>",
"cloneType":1,
"cloneCode":"Statement st1 = con.createStatement();<br>ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount){<br>if (count == 0){<br>createTestDataWithClassicInsert( con );<br>rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br>rs.next();<br>count = rs.getInt(1);<br>}<br>if (count != rowCount){<br>System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");<br>return;<br>}<br>}<br>st1.close();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneType":1,
"cloneCode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneType":1,
"cloneCode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>",
"cloneType":1,
"cloneCode":"pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount)<br>System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");<br>else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"rs.next();<br>int count = rs.getInt(1);<br>if (count != rowCount)<br>System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");<br>else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneType":1,
"cloneCode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\" + e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i*batchSize + r );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneType":1,
"cloneCode":"pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"else System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>st.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>",
"cloneType":1,
"cloneCode":"}<br>}<br>time += System.currentTimeMillis();<br>System.out.println( \"  Test time: \" + time + \" ms\");<br>pr.close();<br>}catch(Exception e){<br>System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"long time = -System.currentTimeMillis();<br>for (int i=0; i<rowCount; i++){<br>pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>",
"cloneType":1,
"cloneCode":"long time = -System.currentTimeMillis();<br>for (int i=0; i<rowCount; i++){<br>pr.setBytes (  1, byteArray );<br>pr.setString(  2 , \"Test\" );<br>pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br>pr.setFloat (  4, (float)1234.56789 );<br>pr.setFloat (  5 , (float)9876.54321 );<br>pr.setBytes (  6, largeByteArray );<br>pr.setInt   (  7 , i );<br>pr.setDouble(  8 , 23.45 );<br>pr.setDouble(  9 , 567.45 );<br>pr.setFloat (  10 , (float)78.89 );<br>pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br>pr.setShort (  12, (short)23456 );<br>pr.setFloat (  13, (float)34.56 );<br>pr.setString(  14, \"sysname (30) NULL\" );<br>pr.setString(  15 , \"text NULL\" );<br>pr.setByte  (  16, (byte)28 );<br>pr.setBytes (  17, byteArray );<br>pr.setString(  18, \"varchar (255) NULL\" );<br>pr.setInt   (  19 , i );<br>int updateCount = pr.executeUpdate();<br>if (updateCount != 1){<br>System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br>return;<br>}<br>}<br>time += System.currentTimeMillis();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"try{<br>Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );<br>ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);<br>long time = -System.currentTimeMillis();<br>for (int i=0; i<rowCount; i++){<br>rs.moveToInsertRow();<br>",
"cloneType":1,
"cloneCode":"try{<br>Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );<br>ResultSet rs = st.executeQuery(\"SELECT * FROM \"+tableName);<br>long time = -System.currentTimeMillis();<br>for (int i=0; i<rowCount; i++){<br>rs.moveToInsertRow();<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
,{
"fileACode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"System.out.println(\"  Failed:\"+e);<br>}finally{<br>System.out.println();<br>System.out.println(\"===================================================================\");<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.BenchTest"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestMoneyRounding",
"duplicate": [
{
"fileACode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestDataTypes"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>int firstValue = -10000;<br>for(int i=firstValue; i<10000; i++){<br>st.execute(\"Insert into \" + table + \"(a,b) values( (\" + i + \"/10000.0), (\" + i + \"/10000.0) )\");<br>}<br>st.close();<br>verify(firstValue);<br>}<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>int firstValue = -10000;<br>for(int i=firstValue; i<10000; i++){<br>st.execute(\"Insert into \" + table + \"(a,b) values(\" + (i/10000.0) + \",\" +(i/10000.0) +\")\");<br>}<br>st.close();<br>verify(firstValue);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestMoneyRounding"
}
,{
"fileACode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
}
,{
"fileACode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>int firstValue = -10000;<br>for(int i=firstValue; i<10000; i++){<br>st.execute(\"Insert into \" + table + \"(a,b) values(\" + (i/10000.0) + \",\" +(i/10000.0) +\")\");<br>}<br>st.close();<br>verify(firstValue);<br>}<br>",
"cloneType":1,
"cloneCode":"Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>int firstValue = -10000;<br>for(int i=firstValue; i<10000; i++){<br>st.execute(\"Insert into \" + table + \"(a,b) values( (\" + i + \"/10000.0), (\" + i + \"/10000.0) )\");<br>}<br>st.close();<br>verify(firstValue);<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestMoneyRounding"
}
,{
"fileACode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>",
"cloneType":1,
"cloneCode":"}<br>public void tearDown(){<br>try{<br>Connection con = AllTests.getConnection();<br>Statement st = con.createStatement();<br>st.execute(\"drop table \" + table);<br>st.close();<br>}catch(Throwable e){<br>}<br>}<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestFunctions"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestDataTypes"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestMoneyRounding"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestOperatoren"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestMoneyRounding"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.junit.TestFunctions"
],
"selfLink":true
}
,{
"name":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionUCase",
"duplicate": [
{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRTrim"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLTrim"
}
,{
"fileACode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>return getString().getBytes();<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneType":1,
"cloneCode":"}<br>final boolean isNull() throws Exception {<br>return param1.isNull();<br>}<br>final byte[] getBytes() throws Exception{<br>if(isNull()) return null;<br>return getString().getBytes();<br>}<br>final String getString() throws Exception {<br>if(isNull()) return null;<br>",
"cloneName":".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLCase"
}
],
"imports":[
".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionRTrim"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLTrim"
,".F:.eclipse.workspace.SE.Assignment2.smallsql0.21_src.src.smallsql.database.ExpressionFunctionLCase"
],
"selfLink":false
}
]